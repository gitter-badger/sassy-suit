@charset "UTF-8";
/*====================================
=            Break points            =
====================================*/
/*-----  End of Break points  ------*/
/*===============================
=            Margins            =
===============================*/
/*-----  End of Margins  ------*/
/*================================
=            Paddings            =
================================*/
/*-----  End of Paddings  ------*/
/**
*
* Material design color palettes.
* @see http://www.google.com/design/spec/style/color.html
*
**/
/* ==========  Blacks  ========== */
/* ==========  Color Palettes  ========== */
/* ==========  Color definitions  ========== */
/**
*
* List of possible units
*
* @group sassyValidation
*
* @type List
*
*/
/**
*
* Tests whether `$var` is bool.
*
* @group sassyValidation
*
* @param {*} $var  - check for bool type
*
* @return {bool}
*
* @example
* is_bool(true)     	//returns true
* is_bool(false) 		//returns true
* is_bool(test)     	//returns false
* is_bool(1)        	//returns false
* is_bool(null)     	//returns false
*
*/
/**
*
* Tests whether `$var` is color.
*
* @group sassyValidation
*
* @param {*} $var  - check for color type
*
* @return {bool}
*
* @example
* is_color(#333)    	//returns true
* is_color(black) 	//returns true
* is_color(test)    	//returns false
*
*/
/**
*
* Tests whether `$var` is empty.
*
* @group sassyValidation
*
* @param {*} $var  - check for emptiness
*
* @return {bool}
*
* @example
* is_empty('')      	//returns true
* is_empty(())      	//returns true
* is_empty('test')	//returns false
*
*/
/**
*
* Tests whether `$var` is list.
*
* @group sassyValidation
*
* @param {*} $var  - check for list type
*
* @return {bool}
*
* @example
* is_list(a b)          //returns true
* is_list(1 2 3)        //returns true
* is_list((test, test)) //returns true
* is_list(test)         //returns false
* is_list(1)            //returns false
*
*/
/**
*
* Tests whether `$var` is map.
*
* @group sassyValidation
*
* @param {*} $var  - check for list type
*
* @return {bool}
*
* @example
* is_map(a: 1, b: 2)   		//returns true
* is_map(1 2 3)        		//returns false
* is_map((test, test))		//returns false
* is_map(test)         		//returns false
* is_map(1)            		//returns false
*
*/
/**
*
* Tests whether `$var` is measure.
*
* @group sassyValidation
*
* @param {*} $var  - check for measure type
*
* @return {bool}
*
* @example
* is_measure(1px) 	//returns true
* is_measure(5em)   	//returns true
* is_measure(5)     	//returns false
* is_measure(test)  	//returns false
* is_measure(em)    	//returns false
*
*/
/**
*
* Tests whether `$var` is bool.
*
* @group sassyValidation
*
* @param {*} $var  - check for bool type
*
* @return {bool}
*
* @example
* is_null(null)    	//returns true
* is_null(false)   	//returns false
* is_null(0)       	//returns false
* is_null('hello') 	//returns false
* is_null(113)     	//returns false
*
*/
/**
*
* Tests whether `$var` is number.
*
* @group sassyValidation
*
* @param {*} $var  - check for number type
*
* @return {bool}
*
* @example
* is_number(1)   	//returns true
* is_number('1') 	//returns false
* is_number(1em) 	//returns false
*
*/
/**
*
* Tests whether `$var` is string.
*
* @group sassyValidation
*
* @param {*} $var  - check for string type
*
* @return {bool}
*
* @example
* is_string(test) 	//returns true
* is_string(1)    	//returns false
*
*/
/**
*
* Tests whether `$var` is unit.
*
* @requires invoke
*
* @param {*} $value  - string or list to test
*
* @return {bool}
*
* @example
* is_unit(1.618rem) //returns true
* is_unit(-1000px) 	//returns true
* is_unit('test') 	//returns false
* is_unit(777) 		//returns false
*
*/
/**
*
* Tests whether `$var` is integer.
*
* @group sassyValidation
*
* @require is-number
*
* @param {literal} $var  - check for integer type
*
* @return {bool}
*
* @example
* is-integer(1) 		//returns true
* is-integer(0) 		//returns true
* is-integer(-50)		//returns true
* is-integer(1.5)		//returns false
* is-integer(1em)		//returns false
*
*/
/**
*
* Tests whether `$var` is float.
*
* @group sassyValidation
*
* @require is-number
* @require is-integer
*
* @param {literal} $var  - check for float type
*
* @return {bool}
*
* @example
* is-float(-1.5)	//returns true
* is-float(1.5) 	//returns true
* is-float(1)		//returns false
* is-float(1em) 	//returns false
* is-float(0) 	//returns false
*
* @todo Literal or * for param
*
*/
/**
*
* Tests whether `$var` is positive.
*
* @group sassyValidation
*
* @require is-number
*
* @param {literal} $var  - check whether $var is positive
*
* @return {bool}
*
* @example
* is-positive(1)   	//returns true
* is-positive(0)   	//returns false
* is-positive(-1)  	//returns false
*
*/
/**
*
* Tests whether `$var` is negative.
*
* @group sassyValidation
*
* @require measure
*
* @param {*} $value  - check for negative values
*
* @return {bool}
*
* @example
* is_negative(-5)     	//returns true
* is_negative(-10px)  	//returns false
* is_negative(300)    	//returns false
* is_negative('test') 	//returns false
* is_negative(0)      	//returns false
*
*/
/**
*
* Tests whether `$var` is a measure and has a negative value.
*
* @group sassyValidation
*
* @require is-number
* @require is-measure
* @require is-negative
*
* @param {*} $var  - check whether $var is a positive measure
*
* @return {bool}
*
* @example
* is-measureNegative(-10em)   	//returns true
* is-measureNegative(0px)     	//returns false
* is-measureNegative(0)       	//returns false
* is-measureNegative(777rem) 		//returns false
*
*/
/**
*
* Tests whether `$var` is a measure and has a positive value.
*
* @group sassyValidation
*
* @require is-number
* @require is-measure
* @require is-positive
*
* @param {*} $var  - check whether $var is a positive measure
*
* @return {bool}
*
* @example
* is-measurePositive(10px)   	//returns true
* is-measurePositive(0px)   	//returns false
* is-measurePositive(0)   	//returns false
* is-measurePositive(-777px)  //returns false
*
*/
/**
*
* Validates input against various tests
*
* @group sassyValidation
*
* @param {value} $var - a variable to be tested
* @param {list|string|any} $validations - the validations to test (e.g. measure, string, number,unit). "any" means it can be any type so there won't be any kind of test.
*
* @return {bool}
*
* @throws '$var is not a known validation type.'
*
* @example
* validate(1em, measure)     	//returns 1em
* validate(em, unit string)  	//returns em
* validate(1, number string) 	//returns 1
* validate(1, number)        	//returns 1
* validate(1, string)        	//returns false
*
*/
/**
*
* Validates input against various tests
*
* @group sassyValidation
*
* @alias validate
*
* @require validate
*
* @param {value} $var - a variable to be tested
* @param {list|string|any} $validations - the validations to test (e.g. measure, string, number,unit). "any" means it can be any type so there won't be any kind of test.
*
* @return {bool}
*
* @throws '$var is not a known validation type.'
*
*/
/**
*
* Output variant
* warn, error, false/none
*
**/
/**
 * Checks whether `$functions` exist in global scope.
 *
 * @access private
 *
 * @param {ArgList} $functions - list of functions to check for
 *
 * @return {Bool} Whether or not there are missing dependencies
 */
/**
 * Compares `$a` and `$b` based on `$order`.
 *
 * @access private
 *
 * @param {*}       $a      - first value
 * @param {*}       $b      - second value
 * @param {List}    $matrix - alphabetical order
 *
 * @return {Bool}
 */
/**
 * Returns truthiness of `$value`.
 *
 * @access private
 *
 * @param {*} $value - value to check
 *
 * @return {Bool}
 */
/**
 * Check whether value is a number
 *
 * @access private
 *
 * @param {*} $value - value to run test against
 *
 * @return {Bool}
 */
/**
 * Chunks `$list` into `$size` large lists.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-chunk
 *
 * @param {List}   $list  - list to chunk
 * @param {Number} $size  - length of lists
 *
 * @throws $size is not a number for `sl-chunk`.
 *
 * @requires sl-to-list
 *
 * @example
 * sl-chunk(a b c d e, 2)
 * // a b, c d, e
 *
 * @return {List | Null}
 */
/**
 * Initialize an empty comma-separated list.
 * 
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-comma-list
 *
 * @example
 * sl-comma-list()
 * // ()
 *
 * @return {List}
 */
/**
 * Returns whether `$list` contains `$value`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-contain
 *
 * @param {List}    $list  - list to check
 * @param {*}       $value - value to look for
 *
 * @example
 * sl-contain(a b c, a)
 * // true
 *
 * @example
 * sl-contain(a b c, z)
 * // false
 *
 * @return {Bool}
 */
/**
 * @requires sl-contain
 * @alias sl-contain
 */
/**
 * Counts the number of occurrences of each value of `$list`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-count-values
 *
 * @param {List} $list - list to count values from
 *
 * @example
 * sl-count-values(a b c a)
 * // (a: 2, b: 1, c: 1) 
 *
 * @return {Map} Values mapped to their count
 */
/**
 * Returns `$list` as a string, prettified if `$pre` is set to true.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-debug
 *
 * @param {List}   $list          - list to debug
 * @param {Bool}   $pre   (false) - enable/disable variables type and proper indentation
 * @param {Number} $level (1)     - internal variable for recursion
 *
 * @requires sl-is-empty
 * @requires sl-is-single
 * @requires sl-has-multiple-values
 * 
 * @example
 * sl-debug(a b c)
 * // '("a", "b", "c")'
 *
 * @return {String}
 */
/**
 * Mixin displaying clean debug
 *
 * @param {List} $list - list
 *
 * @requires sl-debug
 */
/**
 * Tests whether all items from `$list` pass the test implemented by `$function`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-every
 *
 * @param {List}    $list     - list to run test against
 * @param {String}  $function - function to run against every item from list
 * @param {ArgList} $args     - extra arguments to pass to the function
 *
 * @example
 * sl-every(1 2 3, unitless)
 * // true
 *
 * @example
 * sl-every(1 2 3px, unitless)
 * // false
 *
 * @return {Bool}
 */
/**
 * Explodes `$string` into a list using `$delimiter` as a delimiter.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-explode
 *
 * @param {String} $string              - string to explode
 * @param {String} $delimiter ('')      - string to use as a delimiter
 * @param {String} $separator ('space') - list separator
 *
 * @throws $string is not a string for `sl-explode`.
 * @throws $delimiter is not a string for `sl-explode`.
 *
 * @example
 * sl-explode(abc)
 * // a b c
 *
 * @example
 * sl-explode(abc, b)
 * // a c
 * 
 * @return {List | Null}
 */
/** Returns first element of `$list`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-first
 *
 * @param {List} $list - list to retrieve first item from
 *
 * @throws Cannot find first item of empty list.
 *
 * @requires sl-is-empty
 *
 * @example
 * sl-first(a b c)
 * // a
 *
 * @example
 * sl-first(a)
 * // a
 *
 * @example
 * sl-first(())
 * // null
 * 
 * @return {*}
 */
/**
 * @requires sl-first
 * @alias sl-first
 */
/**
 * Turns multidimensional `$list` into a one-level list.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#flatten
 *
 * @param {List} $list - list to flatten
 * 
 * @requires sl-has-multiple-values
 *
 * @example
 * sl-flatten(a b c, d e f, g h i)
 * // a b c d e f g h i
 *
 * @return {List}
 */
/** 
 * @requires sl-flatten
 * @alias sl-flatten
 */
/** Tests whether `$list` is not empty.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-has-values
 *
 * @param {List} $list - list to run test against
 *
 * @example 
 * sl-has-values(a)
 * // true
 *
 * @example 
 * sl-has-values(())
 * // false
 * 
 * @return {Bool}
 */
/**
 * Tests whether `$list` has at least 2 values.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-has-multiple-values
 *
 * @param {List} $list - list to run test against
 *
 * @example 
 * sl-has-multiple-values(a)
 * // false
 *
 * @example 
 * sl-has-multiple-values(a b)
 * // true
 * 
 * @return {Bool}
 */
/** Adds `$value` at `$index` in `$list`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-insert-nth
 *
 * @requires sl-is-true
 *
 * @param {List}    $list  - list to update
 * @param {Number}  $index - index to add
 * @param {*}       $value - value to add
 *
 * @throws List index $index is not a number for `sl-insert-nth`.
 * @throws List index $index must be a non-zero integer for `sl-insert-nth`.
 *
 * @example
 * sl-insert-nth(a b c, 2, z)
 * // a z b c
 *
 * @example
 * sl-insert-nth(a b c, 42, z)
 * // a b c z
 *
 * @example 
 * sl-insert-nth(a b c, -42, z)
 * // null
 * 
 * @return {List | Null}
 */
/**
 * Returns a list of shared value from `$list` and `$lists` minus duplicates.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-intersection
 *
 * @requires sl-remove-duplicates
 * @requires sl-to-list
 *
 * @param {List}    $list  - first list
 * @param {ArgList} $lists - other lists
 *
 * @example
 * sl-intersection(a b c, b e d, a c b)
 * // b
 * 
 * @return {List}
 */
/** 
 * Tests whether `$list` is empty.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-is-empty
 *
 * @param {List} $list - list to run test against
 *
 * @example
 * sl-is-empty(())
 * // true
 *
 * @example
 * sl-is-empty(a)
 * // false
 *
 * @return {Bool}
 */
/**
 * @requires sl-is-empty
 * @alias sl-is-empty
 */
/**
 * Tests whether `$list` has a single item.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-is-single
 *
 * @param {List} $list - list to run test against
 *
 * @example
 * sl-is-single(())
 * // false
 *
 * @example
 * sl-is-single(a)
 * // true
 *
 * @example
 * sl-is-single(a b)
 * // false
 *
 * @return {Bool}
 */
/**
 * Checks whether `$list` is symmetrical.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-is-symmetrical
 *
 * @requires sl-reverse
 *
 * @param {List} $list - list to check
 *
 * @example
 * sl-is-symmetrical(a b c)
 * // false
 *
 * 
 * @example
 * sl-is-symmetrical(a b a)
 * // true
 *
 * @return {Bool}
 */
/**
 * @requires sl-is-symmetrical
 * @alias sl-is-symmetrical
 */
/**
 * Returns last element of `$list`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-last
 *
 * @param {List} $list - list to retrieve last value from
 *
 * @throws Cannot find last item of empty list.
 *
 * @requires sl-is-empty
 *
 * @example
 * sl-last(a b c)
 * // c
 * 
 * @example
 * sl-last(a)
 * // a
 *
 * @example
 * sl-last(())
 * // null
 * 
 * @return {*}
 */
/**
 * Returns last index of `$value` in `$list`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-last-index
 *
 * @param {List} $list  - list to search
 * @param {*}    $value - value to be searched for
 *
 * @example
 * sl-last-index(a b a, a)
 * // 3
 *
 * @example
 * sl-last-index(a b a, z)
 * // null
 *
 * @return {Number | Null}
 */
/**
 * Shift indexes from `$list` of `$value`.
 *
 * @author Ana Tudor
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-loop
 *
 * @param {List}   $list      - list to update
 * @param {Number} $value (1) - number of position between old and new indexes
 *
 * @throws $value is not a number for `loop`.
 *
 * @requires sl-has-multiple-values
 *
 * @example
 * sl-loop(a b c)
 * // c a b
 * 
 * @example
 * sl-loop(a b c, 2)
 * // b c a
 *
 * @return {List | Null}
 */
/**
 * @requires sl-loop
 * @alias sl-loop
 */
/**
 * Adds `$value` as first index of `$list`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-prepend
 *
 * @requires sl-is-true
 * @requires sl-to-list
 *
 * @param {List} $list  - list to preprend value to
 * @param {*}    $value - value to prepend to the list
 *
 * @example
 * sl-prepend(a b c, z)
 * // z a b c
 * 
 * @return {List}
 */
/** Removes all false and null values from `$list`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#purge
 *
 * @requires sl-is-true
 * @requires sl-to-list
 *
 * @param {List} $list - list to purge
 *
 * @example
 * sl-purge(null a false b)
 * // a b
 *
 * @return {List}
 */
/**
 * @requires sl-purge
 * @alias sl-purge
 */
/**
 * Returns a random value of `$list`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#random-value
 *
 * @param {List} $list - list to random value from
 *
 * @throws Cannot find a random value in an empty list.
 *
 * @requires sl-is-empty
 *
 * @example
 * sl-random-value(a b c)
 * // a
 * 
 * @return {*}
 */
/**
 * @requires sl-random-value
 * @alias sl-random-value
 */
/**
 * @requires sl-random-value
 * @alias sl-random-value
 */
/**
 * Build a list of values from 1 through `$n`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-range
 *
 * @param {Number} $n - maximum value
 *
 * @throws `$n` is not a number for `sl-range`.
 * @throws `$n` is not unitless for `sl-range`.
 * @throws `$n` is not greater than 0 for `sl-range`.
 *
 * @example
 * sl-range(5)
 * // 1 2 3 4 5
 *
 * @example
 * sl-range(1)
 * // 1
 *
 * @example
 * sl-range(-42)
 * // null
 *
 * @return {List | Number | Null}
 */
/**
 * Removes value(s) `$value` from `$list`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-remove
 *
 * @requires sl-replace
 *
 * @param {List}    $list      - list to update
 * @param {*}       $value     - value to remove
 * @param {Bool}    $recursive - enable/disable recursion
 *
 * @example
 * sl-remove(a b c, a)
 * // b c
 *
 * @return {List}
 */
/**
 * @requires sl-remove
 * @alias sl-remove
 */
/**
 * Removes duplicate values from `$list`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-remove-duplicates
 *
 * @param {List} $list - list to remove duplicates from
 *
 * @requires sl-to-list
 *
 * @example
 * sl-remove-duplicates(a b a b)
 * // a b
 *
 * @return {List}
 */
/**
 * @requires sl-remove-duplicates
 * @alias sl-remove-duplicates
 */
/**
 * Removes value from `$list` at index `$index`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-remove-nth
 *
 * @requires sl-replace-nth
 *
 * @param {List}   $list  - list to remove value from
 * @param {Number} $index - index to remove
 *
 * @example
 * sl-remove-nth(a b c, 2)
 * // a c
 *
 * @example
 * sl-remove-nth(a b c, 42)
 * // null
 *
 * @return {List | Null}
 */
/**
 * @requires sl-remove-nth
 * @alias sl-remove-nth
 */
/**
 * Replaces `$old` by `$new` in `$list`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#replace
 *
 * @requires sl-is-true
 * @requires sl-purge
 * @requires sl-to-list
 *
 * @param {List}    $list  - list to update
 * @param {*}       $old   - value to replace
 * @param {*}       $value - new value for $old
 *
 * @example
 * sl-replace(a b c, b, z)
 * // a z c
 *
 * @example
 * sl-replace(a b c, y, z)
 * // a b c
 * 
 * @return {List}
 */
/**
 * Replaces value at `$index` from `$list` by `$value`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-replace-nth
 *
 * @requires sl-purge
 * @requires sl-is-true
 * @requires sl-to-list
 *
 * @param {List}   $list  - list to update
 * @param {Number} $index - index to update
 * @param {*}      $value - new value for index
 *
 * @throws Invalid index $index for `sl-replace-nth`.
 *
 * @example
 * sl-replace-nth(a b c, 2, z)
 * // a z c
 *
 * @example
 * sl-replace-nth(a b c, 100, z)
 * // null
 *
 * @return {List | Null}
 */
/**
 * Reverses the order of `$list`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-reverse
 *
 * @param {List} $list - list to reverse
 *
 * @requires sl-to-list
 *
 * @example
 * sl-reverse(a b c)
 * // c b a
 * 
 * @return {List}
 */
/**
 * @requires sl-reverse
 * @alias sl-reverse
 */
/**
 * Shuffle `$list` using Fisher-Yates method.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-shuffle
 *
 * @param {List} $list - list to shuffle
 *
 * @requires sl-to-list
 * 
 * @example
 * sl-shuffle(a b c)
 * // b a c
 * 
 * @return {List}
 */
/**
 * @requires sl-shuffle
 * @alias sl-shuffle
 */
/**
 * Slices `$list` between `$start` and `$end`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-slice
 *
 * @param {List}   $list                  - list to slice
 * @param {Number} $start (1)             - start index
 * @param {Number} $end   (length($list)) - end index
 *
 * @throws List indexes $start and $end must be numbers for `sl-slice`.
 * @throws Start index has to be lesser than or equals to the end index for `sl-slice`.
 * @throws List indexes must be non-zero integers for `sl-slice`.
 * @throws Start index has to be lesser than or equal to list length for `sl-slice`.
 * @throws End index has to be lesser than or equal to list length for `sl-slice`.
 * 
 * @example
 * sl-slice(a b c d e, 2, 4)
 * // b c d
 *
 * @example
 * sl-slice(a b c d e, 2, 2)
 * // b
 *
 * @example
 * sl-slice(a b c d e, 4, 2)
 * // null
 *
 * @example
 * sl-slice(a b c d e, -1, 6)
 * // null
 * 
 * @return {List | Null}
 */
/**
 * Sorts values of `$list` using quick-sort algorithm using `$order`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-sort
 *
 * @requires sl-str-compare
 * @requires sl-has-multiple-values
 * @requires sl-to-list
 *
 * @param {List} $list  - list to sort
 * @param {List} $order - order to respect
 *
 * @example
 * sl-sort(b a c)
 * // a b c
 *
 * @example
 * sl-sort(3 5 1)
 * // 1 3 5 
 *
 * @return {List}
 */
/**
 * @requires sl-sort
 * @alias sl-sort
 */
/**
 * Tests whether some items from `$list` pass the test implemented by `$function`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-some
 *
 * @param {List}    $list     - list to run test against
 * @param {String}  $function - function to run against every item from list
 * @param {ArgList} $args     - extra arguments to pass to the function
 *
 * @example
 * sl-some(1 2 3, unitless)
 * // true
 *
 * @example
 * sl-some(1 2 3px, unitless)
 * // true
 *
 * @example
 * sl-some(1px 2px 3px, unitless)
 * // false
 *
 * @return {Bool}
 */
/**
 * Sums up all numeric values in `$list`, stripping unit if `$force` set to `true`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-sum
 *
 * @param {List} $list          - list
 * @param {Bool} $force (false) - enable/disable parseInt
 *
 * @requires sl-every
 * @requires sl-is-number
 *
 * @throws All items from list are not numbers for `sl-sum`.
 *
 * @example
 * sl-sum(1 2 3)
 * // 6
 *
 * @example
 * sl-sum(a b 1)
 * null
 *
 * @example
 * sl-sum(1 2 3px, true)
 * // 6
 * 
 * @return {Number}
 */
/**
 * Returns the tail of `$list`: all items except the first (head).
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-tail
 *
 * @requires sl-slice
 *
 * @param {List} $list - list to retrieve tail from
 *
 * @example
 * sl-tail(a b c)
 * // b c 
 *
 * @return {List | Null}
 */
/**
 * @requires sl-tail
 * @alias sl-tail
 */
/**
 * Casts `$value` into a list.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-to-list
 *
 * @param {*} $value - value to cast to list
 * @param {String} $separator (space) - separator to use
 *
 * @example
 * sl-to-list(a b c, comma)
 * // a, b, c
 * 
 * @return {List}
 */
/**
 * @requires sl-to-list
 * @alias sl-to-list
 */
/**
 * Casts `$list` into a map, using indexes as keys (starting with `$start`).
 * Useful for iterating through a list with an index variable.
 * e.g. `@each $index, $value in to-map($list)`
 *
 * @author Andrey "Lolmaus" Mikhaylov
 * @author Chris Eppstein
 * 
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-to-map
 * 
 * @param {List} $list - list to turn into map
 *
 * @requires sl-range
 * @requires sl-is-empty
 * 
 * @throws List cannot be empty for `sl-to-map`.
 *
 * @example
 * sl-to-map(a b c)
 * // 1 a, 2 b, 3 c
 * 
 * @return {Map | Null}
 */
/**
 * @requires sl-to-map
 * @alias sl-to-map
 */
/**
 * @requires sl-to-map
 * @alias sl-to-map
 */
/**
 * Joins all elements of `$list` with `$glue`.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-to-string
 *
 * @param {List}   $list      - list to cast
 * @param {String} $glue ('') - value to use as a join string
 *
 * @requires sl-has-multiple-values
 * @requires sl-last
 * 
 * @example
 * sl-to-string(a b c)
 * // abc
 *
 * @example
 * sl-to-string(a b c, '-')
 * // a-b-c
 * 
 * @return {String}
 */
/**
 * @requires sl-to-string
 * @alias sl-to-string
 */
/**
 * Returns a list of values from `$lists` minus duplicates.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-union
 *
 * @requires sl-flatten
 * @requires sl-remove-duplicates
 *
 * @param {ArgList} $lists - lists to unify
 *
 * @example
 * sl-union(a b c, b e d, a c b)
 * // a b c e d
 * 
 * @return {List}
 */
/**
 * @requires sl-union
 * @alias sl-union
 */
/**
 * Apply `$function` to every item from `$list` passing $args as parameters.
 *
 * @ignore Documentation: http://sassylists.com/documentation.html#sl-walk
 *
 * @param {List}    $list     - list to update
 * @param {String}  $function - function to call on each value
 * @param {ArgList} $args     - optional function arguments
 *
 * @throws There is no `$function` function for `sl-walk`.
 *
 * @requires sl-to-map
 * @requires sl-to-list
 *
 * @example
 * sl-walk(a b c, to-upper-case)
 * // A B C
 *
 * @return {List | Null}
 */
/**
 * http://hugogiraudel.com/2013/08/08/advanced-sass-list-functions/
 */
/**
 * Searches a Sass map for the given key and/or set of keys
 *
 * @param   {map}     $map  The map to search in
 * @param   {mixed}   $keys The key(s) to search for
 * @return  {mixed}         The matched key or an empty value
 */
/*

// Example

$config: (
	background: #000,

	links: (
		normal    : #fff,
		hover     : darken(#fff, 10%),
		focus     : darken(#fff, 20%),
		active    : darken(#fff, 15%),
		visited   : darken(#fff, 30%)
	),

	random: (
		why: 'Just because I can!',

		deep: (
			hello: 'World!',

			justwhy: (
				foo: 'Hello',
				bar: 'World',

				because: (
					i: (
						said: (
							so: 'It\'s awesome'
						)
					)
				)
			)
		)
	)
);

body {
	content: map-search($config, background);
	content: map-search($config, random deep justwhy foo);
	content: map-search($config, random deep justwhy bar);
	content: map-search($config, random deep justwhy because i said so);
}

*/
/*============================================================
=            Stored values from root _config.scss            =
============================================================*/
/*-----  End of Stored values from root _config.scss  ------*/
/*===================================
=      Font Family Configs          =
===================================*/
/*-----  End of Font Family Configs  ------*/
/*=========================================
=            Font Family Names            =
=========================================*/
/*-----  End of Font Family Names  ------*/
/*===================================
=            Breakpoints            =
===================================*/
/*-----  End of Breakpoints  ------*/
/**
*
* Core typography function, which validates and calculates base values for:
	- `font-size`
	- `line-height`
	- `letter-spacing`
	- `padding`
*
* Has option to `round` selected values
*
* @author Vova Skok
*
* @group Type
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_typeSetFunction.scss
*
* @param {Number} $typeBase - core value
* @param {Number} $typeIndexBegin - list's starting point
* @param {Number} $typeIndexEnd - list's last point
* @param {Number} $typeSizeRatio - `font-size` ratio value
* @param {Number} $typeLineHeightRatio - `line-height` ratio value
* @param {Number} $typePaddingRatio - `padding` ratio value
* @param {Number} $typeLetterSpacingRatio - `letter-spacing` ratio value
*
* @require val
* @require ms-list
* @require sl-walk
* @require multiply
* @require divide
*
* @throw `$typeBase` - is not a measure!
* @throw `$typeSizeRatio` - is not a positive integer or float, which is more than 1!
* @throw `$typeLineHeightRatio` - is not positive and more than 1!
* @throw `$typeLetterSpacingRatio` - is not a positive integer or float, which is more than 1!
* @throw `$typeLetterSpacingRatio` - is not measure or equals 0!
* @throw `$typePaddingRatio` - is not measure or equals 0!
* @throw `$typeIndexBegin` - is not measure or equals 0!
* @throw `$typeIndexBegin` - is not 0 or a negative integer!
* @throw `$typeIndexEnd` - is not a positive integer!
*
* @return {List}
*
*/
/**
*
* Variable, which holds `typeSetFunction` result.
*
* @group Type
*
* @author Vova Skok
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_typeSetResponsiveGlobal.scss
*
* @require typeSet
*
* @type List
*
* @todo Check if function-exists($typeSet)
*
*/
/**
*
* Typography function, which validates, generates and calculates responsive ratios for each typography break point.
*
* Number of ratios - `$typeBpsRatios` has to be eqaul to a number of typography breakpoints - `$typeBps`.
*
* Each value of `$typeBpsRatios` has to match every value of `$typeBps`.
*
* If `$typeBpsRatios` is a single number and `$typeBps` is a list, than
* `typeSetResponsiveRatios` function will generate a list with `length($typeBps)` length and `$value` values in it.
*
* @group Type
*
* @author Vova Skok
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_typeSetResponsiveRatiosFunction.scss
*
* @param {Number | List} $value - responsive ratios or ratio
*
* @require val
*
* @throw `$typeBpsRatios` - is not a list with positive numbers or a number
*
* @return {List | Number}
*
*/
/**
*
* Typography function, which validates and calculates responsive ratios for each typography break point, using previously generated responsive ratios.
*
* Number of ratios - `$typeBpsRatios` has to be eqaul to a number of typography breakpoints - `$typeBps`.
*
* @group Type
*
* @author Vova Skok
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_typeSetResponsiveFunction.scss
*
* @param {Number | List} $typeBps - responsive ratios or ratio
* @param {Number | List} $typeBpsRatios - responsive break point or break points
*
* @require val
* @require sl-walk
* @require sl-sort
* @require map-set
* @require typeSetResponsiveRatios
*
* @throw `$typeBpsRatios` - is not a list with positive numbers or a number
*
* @return {List}
*
* @todo Add variant for single `$typeBps` and `typeBpsRatios` calculation, rename => typeSetResponsive
*
*/
/**
*
* Variable, which holds `typeSetResponsiveFunction` result.
*
* @group Type
*
* @author Vova Skok
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_typeSetResponsiveGlobal.scss
*
* @require typeSetResponsiveRatios
*
* @type List
*
* @todo Add @if wrapper, which validates and checks for existance, because
* `$typeSetResponsive` - is optional variable
*
*/
/**
*
* Typography mixin, which generates `font-size`, `line-height`, `letter-spacing` and `padding` for each break point.
*
* @group Type
*
* @author Vova Skok
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_typeSetResponsiveMixin.scss
*
* @param {Number} $scale - typography scale set index
*
* @require map-get
*
* @todo Add scale validation, check if $typeSetResponsive exists, add @require
*
*/
/**
*
* Google Web Fonts string replacing function.
*
* @group WebFonts
*
* @author Vova Skok
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_typeSetWebFontsFunction.scss
*
* @param {String} $string - string to replace
* @param {String} $find - string to find
* @param {String} $replace - string to replace
*
* @require webFontsStringReplace
* @require val
*
* @return {String}
*
* @throw `$string` - is not a string
* @throw `$find` - is not a find
* @throw `$replace` - is not a replace
*
*/
/**
*
* Google Web Fonts URL encoding function.
*
* @group WebFonts
*
* @author Vova Skok
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_typeSetWebFontsFunction.scss
*
* @require webFontsStriongReplace
* @require val
*
* @param {String} $string - string to encode
*
* @return {String}
*
* @throw `$string` - is not a valid string
*
*/
/**
*
* Google Web Fonts string implode function.
*
* @group WebFonts
*
* @author Vova Skok
*
* @require val
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_typeSetWebFontsFunction.scss
*
* @param {List | String} $list - string to replace
* @param {String} $separator - list seperator
*
* @return {String}
*
* @throw $list was not validated as a list or a string
*
*/
/**
*
* Google Web Fonts string serialize function.
*
* @group WebFonts
*
* @author Vova Skok
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_typeSetWebFontsFunction.scss
*
* @require val
* @require webFontsSerialize
* @require webFontsImplode
* @require webFontsStringReplace
* @require webFontsURLEncode
*
* @param {List | String} $fonts - stores list of font values
*
* @return {String}
*
* @throw Unsupported font type
* @throw $fonts was not validated as a map with string data type keys and values
* @throw $fonts was not validated as a list with string values
*
* @todo Deal with type-of($fonts) == 'arglist', add funciton to SassyValidation
*
*/
/**
*
* Google Web Fonts protocol variable.
*
* @group WebFonts
*
* @author Vova Skok
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_typeSetWebFontsFunction.scss
*
* @type String
*
*/
/**
*
* Typography mixin, which outputs Google Web Fonts.
*
* @group WebFonts
*
* @author Vova Skok
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_webFontsMixin.scss
*
* @param {List | String} $fonts - font or list of fonts
*
* @require webFontsSerialize
*
* @todo Add validation, check if wf-serialize funciton exists
*
*/
@import url("https://fonts.googleapis.com/css?family=Roboto|Nunito|Roboto%3A%20700|Roboto%3A%20300|Roboto%3A%20400%2C%20italic|Open%20Sans|Dosis|Open%20Sans%3A%20700|Open%20Sans%3A%20300|Open%20Sans%3A%20400%2C%20italic");
.wrapper {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
}
.wrapper:after {
  content: " ";
  display: block;
  clear: both;
}

main {
  background-color: #eee;
  width: 66.10169491525424%;
  float: left;
  margin-right: 1.694915254237288%;
}

aside {
  background-color: #999;
  width: 32.20338983050847%;
  float: right;
  margin-right: 0;
}
aside ul {
  background-color: lightblue;
}

/*! normalize.css v1.1.3 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 6/7/8/9 and Firefox 3.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block;
}

/**
 * Correct `inline-block` display not defined in IE 6/7/8/9 and Firefox 3.
 */
audio,
canvas,
video {
  display: inline-block;
  *display: inline;
  *zoom: 1;
}

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0;
}

/**
 * Address styling not present in IE 7/8/9, Firefox 3, and Safari 4.
 * Known issue: no IE 6 support.
 */
[hidden] {
  display: none;
}

/* ==========================================================================
   Base
   ========================================================================== */
/**
 * 1. Correct text resizing oddly in IE 6/7 when body `font-size` is set using
 *    `em` units.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-size: 100%;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */
}

/**
 * Address `font-family` inconsistency between `textarea` and other form
 * elements.
 */
html,
button,
input,
select,
textarea {
  font-family: sans-serif;
}

/**
 * Address margins handled incorrectly in IE 6/7.
 */
body {
  margin: 0;
}

/* ==========================================================================
   Links
   ========================================================================== */
/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted;
}

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0;
}

/* ==========================================================================
   Typography
   ========================================================================== */
/**
 * Address font sizes and margins set differently in IE 6/7.
 * Address font sizes within `section` and `article` in Firefox 4+, Safari 5,
 * and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0;
}

h2 {
  font-size: 1.5em;
  margin: 0.83em 0;
}

h3 {
  font-size: 1.17em;
  margin: 1em 0;
}

h4 {
  font-size: 1em;
  margin: 1.33em 0;
}

h5 {
  font-size: 0.83em;
  margin: 1.67em 0;
}

h6 {
  font-size: 0.67em;
  margin: 2.33em 0;
}

/**
 * Address styling not present in IE 7/8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted;
}

/**
 * Address style set to `bolder` in Firefox 3+, Safari 4/5, and Chrome.
 */
b,
strong {
  font-weight: bold;
}

blockquote {
  margin: 1em 40px;
}

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic;
}

/**
 * Address differences between Firefox and other browsers.
 * Known issue: no IE 6/7 normalization.
 */
hr {
  box-sizing: content-box;
  height: 0;
}

/**
 * Address styling not present in IE 6/7/8/9.
 */
mark {
  background: #ff0;
  color: #000;
}

/**
 * Address margins set differently in IE 6/7.
 */
p,
pre {
  margin: 1em 0;
}

/**
 * Correct font family set oddly in IE 6, Safari 4/5, and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  _font-family: 'courier new', monospace;
  font-size: 1em;
}

/**
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre;
  white-space: pre-wrap;
  word-wrap: break-word;
}

/**
 * Address CSS quotes not supported in IE 6/7.
 */
q {
  quotes: none;
}

/**
 * Address `quotes` property not supported in Safari 4.
 */
q:before,
q:after {
  content: '';
  content: none;
}

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%;
}

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline;
}

sup {
  top: -0.5em;
}

sub {
  bottom: -0.25em;
}

/* ==========================================================================
   Lists
   ========================================================================== */
/**
 * Address margins set differently in IE 6/7.
 */
dl,
menu,
ol,
ul {
  margin: 1em 0;
}

dd {
  margin: 0 0 0 40px;
}

/**
 * Address paddings set differently in IE 6/7.
 */
menu,
ol,
ul {
  padding: 0 0 0 40px;
}

/**
 * Correct list images handled incorrectly in IE 7.
 */
nav ul,
nav ol {
  list-style: none;
  list-style-image: none;
}

/* ==========================================================================
   Embedded content
   ========================================================================== */
/**
 * 1. Remove border when inside `a` element in IE 6/7/8/9 and Firefox 3.
 * 2. Improve image quality when scaled in IE 7.
 */
img {
  border: 0;
  /* 1 */
  -ms-interpolation-mode: bicubic;
  /* 2 */
}

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden;
}

/* ==========================================================================
   Figures
   ========================================================================== */
/**
 * Address margin not present in IE 6/7/8/9, Safari 5, and Opera 11.
 */
figure {
  margin: 0;
}

/* ==========================================================================
   Forms
   ========================================================================== */
/**
 * Correct margin displayed oddly in IE 6/7.
 */
form {
  margin: 0;
}

/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em;
}

/**
 * 1. Correct color not being inherited in IE 6/7/8/9.
 * 2. Correct text not wrapping in Firefox 3.
 * 3. Correct alignment displayed oddly in IE 6/7.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  white-space: normal;
  /* 2 */
  *margin-left: -7px;
  /* 3 */
}

/**
 * 1. Correct font size not being inherited in all browsers.
 * 2. Address margins set differently in IE 6/7, Firefox 3+, Safari 5,
 *    and Chrome.
 * 3. Improve appearance and consistency in all browsers.
 */
button,
input,
select,
textarea {
  font-size: 100%;
  /* 1 */
  margin: 0;
  /* 2 */
  vertical-align: baseline;
  /* 3 */
  *vertical-align: middle;
  /* 3 */
}

/**
 * Address Firefox 3+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal;
}

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 6+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none;
}

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 * 4. Remove inner spacing in IE 7 without affecting normal text inputs.
 *    Known issue: inner spacing remains in IE 6.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */
  *overflow: visible;
  /* 4 */
}

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default;
}

/**
 * 1. Address box sizing set to content-box in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 * 3. Remove excess padding in IE 7.
 *    Known issue: excess padding remains in IE 6.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */
  *height: 13px;
  /* 3 */
  *width: 13px;
  /* 3 */
}

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  /* 2 */
  box-sizing: content-box;
}

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none;
}

/**
 * Remove inner padding and border in Firefox 3+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0;
}

/**
 * 1. Remove default vertical scrollbar in IE 6/7/8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */
}

/* ==========================================================================
   Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0;
}

/*! HTML5 Boilerplate v4.3.0 | MIT License | http://h5bp.com/ */
/*
 * What follows is the result of much research on cross-browser styling.
 * Credit left inline and big thanks to Nicolas Gallagher, Jonathan Neal,
 * Kroc Camen, and the H5BP dev community and team.
 */
/* ==========================================================================
   Base styles: opinionated defaults
   ========================================================================== */
html,
button,
input,
select,
textarea {
  color: #222;
}

html {
  font-size: 1em;
  line-height: 1.4;
}

/*
 * Remove text-shadow in selection highlight: h5bp.com/i
 * These selection rule sets have to be separate.
 * Customize the background color to match your design.
 */
::-moz-selection {
  background: #b3d4fc;
  text-shadow: none;
}

::selection {
  background: #b3d4fc;
  text-shadow: none;
}

/*
 * A better looking default horizontal rule
 */
hr {
  display: block;
  height: 1px;
  border: 0;
  border-top: 1px solid #ccc;
  margin: 1em 0;
  padding: 0;
}

/*
 * Remove the gap between images, videos, audio and canvas and the bottom of
 * their containers: h5bp.com/i/440
 */
audio,
canvas,
img,
video {
  vertical-align: middle;
}

/*
 * Remove default fieldset styles.
 */
fieldset {
  border: 0;
  margin: 0;
  padding: 0;
}

/*
 * Allow only vertical resizing of textareas.
 */
textarea {
  resize: vertical;
}

/* ==========================================================================
   Browse Happy prompt
   ========================================================================== */
.browsehappy {
  margin: 0.2em 0;
  background: #ccc;
  color: #000;
  padding: 0.2em 0;
}

/* ==========================================================================
   Author's custom styles
   ========================================================================== */
/* ==========================================================================
   Helper classes
   ========================================================================== */
/*
 * Image replacement
 */
.ir {
  background-color: transparent;
  border: 0;
  overflow: hidden;
  /* IE 6/7 fallback */
  *text-indent: -9999px;
}

.ir:before {
  content: "";
  display: block;
  width: 0;
  height: 150%;
}

/*
 * Hide from both screenreaders and browsers: h5bp.com/u
 */
.hidden {
  display: none !important;
  visibility: hidden;
}

/*
 * Hide only visually, but have it available for screenreaders: h5bp.com/v
 */
.visuallyhidden {
  border: 0;
  clip: rect(0 0 0 0);
  height: 1px;
  margin: -1px;
  overflow: hidden;
  padding: 0;
  position: absolute;
  width: 1px;
}

/*
 * Extends the .visuallyhidden class to allow the element to be focusable
 * when navigated to via the keyboard: h5bp.com/p
 */
.visuallyhidden.focusable:active,
.visuallyhidden.focusable:focus {
  clip: auto;
  height: auto;
  margin: 0;
  overflow: visible;
  position: static;
  width: auto;
}

/*
 * Hide visually and from screenreaders, but maintain layout
 */
.invisible {
  visibility: hidden;
}

/*
 * Clearfix: contain floats
 *
 * For modern browsers
 * 1. The space content is one way to avoid an Opera bug when the
 *    `contenteditable` attribute is included anywhere else in the document.
 *    Otherwise it causes space to appear at the top and bottom of elements
 *    that receive the `clearfix` class.
 * 2. The use of `table` rather than `block` is only necessary if using
 *    `:before` to contain the top-margins of child elements.
 */
.clearfix:before,
.clearfix:after {
  content: " ";
  /* 1 */
  display: table;
  /* 2 */
}

.clearfix:after {
  clear: both;
}

/*
 * For IE 6/7 only
 * Include this rule to trigger hasLayout and contain floats.
 */
.clearfix {
  *zoom: 1;
}

/* ==========================================================================
   EXAMPLE Media Queries for Responsive Design.
   These examples override the primary ('mobile first') styles.
   Modify as content requires.
   ========================================================================== */
@media only screen and (min-width: 35em) {
  /* Style adjustments for viewports that meet the condition */
}
@media print, (-o-min-device-pixel-ratio: 5 / 4), (-webkit-min-device-pixel-ratio: 1.25), (min-resolution: 120dpi) {
  /* Style adjustments for high resolution devices */
}
/* ==========================================================================
   Print styles.
   Inlined to avoid required HTTP connection: h5bp.com/r
   ========================================================================== */
@media print {
  * {
    background: transparent !important;
    color: #000 !important;
    /* Black prints faster: h5bp.com/s */
    box-shadow: none !important;
    text-shadow: none !important;
  }

  a,
  a:visited {
    text-decoration: underline;
  }

  a[href]:after {
    content: " (" attr(href) ")";
  }

  abbr[title]:after {
    content: " (" attr(title) ")";
  }

  /*
   * Don't show links for images, or javascript/internal links
   */
  .ir a:after,
  a[href^="javascript:"]:after,
  a[href^="#"]:after {
    content: "";
  }

  pre,
  blockquote {
    border: 1px solid #999;
    page-break-inside: avoid;
  }

  thead {
    display: table-header-group;
    /* h5bp.com/t */
  }

  tr,
  img {
    page-break-inside: avoid;
  }

  img {
    max-width: 100% !important;
  }

  @page {
    margin: 0.5cm;
  }
  p,
  h2,
  h3 {
    orphans: 3;
    widows: 3;
  }

  h2,
  h3 {
    page-break-after: avoid;
  }
}
/* apply a natural box layout model to all elements, but allowing components to change */
html {
  box-sizing: border-box;
}

*,
*:before,
*:after {
  box-sizing: inherit;
}

::-moz-selection {
  color: #fff;
  background: #c2185b;
}

::selection {
  color: #fff;
  background: #c2185b;
}

html,
body,
button {
  -moz-osx-font-smoothing: antialiased;
  -webkit-font-smoothing: antialiased;
  font-smoothing: antialiased;
}

body {
  font-family: sans-serif;
  font-size: 16px;
  line-height: 18px;
  font-weight: 400;
  color: #212121;
}

a {
  color: #c51162;
}
a:hover, a:focus, a:active {
  color: #f50057;
  text-decoration: none;
}

blockquote,
dl,
dd,
h1,
h2,
h3,
h4,
h5,
h6,
figure,
p,
pre {
  margin: 0;
}

button {
  background: transparent;
  border: 0;
  padding: 0;
}

/**
 * Work around a Firefox/IE bug where the transparent `button` background
 * results in a loss of the default `button` focus styles.
 */
button:focus {
  outline: 1px dotted;
  outline: 5px auto -webkit-focus-ring-color;
}

fieldset {
  border: 0;
  margin: 0;
  padding: 0;
}

iframe {
  border: 0;
}

/**
 * Suppress the focus outline on links that cannot be accessed via keyboard.
 * This prevents an unwanted focus outline from appearing around elements that
 * might still respond to pointer events.
 */
[tabindex="-1"]:focus {
  outline: none !important;
}

img,
video {
  max-width: 100%;
  height: auto;
}

/*==========  Base Sets Placeholders  ==========*/
h6 {
  font-size: 11px;
  line-height: 17px;
  letter-spacing: -0.275px;
  padding: 8px 0;
}
@media (min-width: 320px) {
  h6 {
    font-size: 12px;
    line-height: 18px;
    letter-spacing: -0.30000000000000004px;
    padding: 9px 0;
  }
}
@media (min-width: 480px) {
  h6 {
    font-size: 13px;
    line-height: 20px;
    letter-spacing: -0.325px;
    padding: 10px 0;
  }
}
@media (min-width: 768px) {
  h6 {
    font-size: 14px;
    line-height: 21px;
    letter-spacing: -0.35000000000000003px;
    padding: 11px 0;
  }
}
@media (min-width: 960px) {
  h6 {
    font-size: 16px;
    line-height: 24px;
    letter-spacing: -0.4px;
    padding: 12px 0;
  }
}
@media (min-width: 1140px) {
  h6 {
    font-size: 17px;
    line-height: 26px;
    letter-spacing: -0.42500000000000004px;
    padding: 13px 0;
  }
}
@media (min-width: 320px) {
  h6 {
    font-size: 12px;
    line-height: 18px;
    letter-spacing: -0.30000000000000004px;
    padding: 9px 0;
  }
}
@media (min-width: 480px) {
  h6 {
    font-size: 13px;
    line-height: 20px;
    letter-spacing: -0.325px;
    padding: 10px 0;
  }
}
@media (min-width: 768px) {
  h6 {
    font-size: 14px;
    line-height: 21px;
    letter-spacing: -0.35000000000000003px;
    padding: 11px 0;
  }
}
@media (min-width: 960px) {
  h6 {
    font-size: 16px;
    line-height: 24px;
    letter-spacing: -0.4px;
    padding: 12px 0;
  }
}
@media (min-width: 1140px) {
  h6 {
    font-size: 17px;
    line-height: 26px;
    letter-spacing: -0.42500000000000004px;
    padding: 13px 0;
  }
}
@media (min-width: 320px) {
  h6 {
    font-size: 12px;
    line-height: 18px;
    letter-spacing: -0.30000000000000004px;
    padding: 9px 0;
  }
}
@media (min-width: 480px) {
  h6 {
    font-size: 13px;
    line-height: 20px;
    letter-spacing: -0.325px;
    padding: 10px 0;
  }
}
@media (min-width: 768px) {
  h6 {
    font-size: 14px;
    line-height: 21px;
    letter-spacing: -0.35000000000000003px;
    padding: 11px 0;
  }
}
@media (min-width: 960px) {
  h6 {
    font-size: 16px;
    line-height: 24px;
    letter-spacing: -0.4px;
    padding: 12px 0;
  }
}
@media (min-width: 1140px) {
  h6 {
    font-size: 17px;
    line-height: 26px;
    letter-spacing: -0.42500000000000004px;
    padding: 13px 0;
  }
}
@media (min-width: 320px) {
  h6 {
    font-size: 12px;
    line-height: 18px;
    letter-spacing: -0.30000000000000004px;
    padding: 9px 0;
  }
}
@media (min-width: 480px) {
  h6 {
    font-size: 13px;
    line-height: 20px;
    letter-spacing: -0.325px;
    padding: 10px 0;
  }
}
@media (min-width: 768px) {
  h6 {
    font-size: 14px;
    line-height: 21px;
    letter-spacing: -0.35000000000000003px;
    padding: 11px 0;
  }
}
@media (min-width: 960px) {
  h6 {
    font-size: 16px;
    line-height: 24px;
    letter-spacing: -0.4px;
    padding: 12px 0;
  }
}
@media (min-width: 1140px) {
  h6 {
    font-size: 17px;
    line-height: 26px;
    letter-spacing: -0.42500000000000004px;
    padding: 13px 0;
  }
}
@media (min-width: 320px) {
  h6 {
    font-size: 12px;
    line-height: 18px;
    letter-spacing: -0.30000000000000004px;
    padding: 9px 0;
  }
}
@media (min-width: 480px) {
  h6 {
    font-size: 13px;
    line-height: 20px;
    letter-spacing: -0.325px;
    padding: 10px 0;
  }
}
@media (min-width: 768px) {
  h6 {
    font-size: 14px;
    line-height: 21px;
    letter-spacing: -0.35000000000000003px;
    padding: 11px 0;
  }
}
@media (min-width: 960px) {
  h6 {
    font-size: 16px;
    line-height: 24px;
    letter-spacing: -0.4px;
    padding: 12px 0;
  }
}
@media (min-width: 1140px) {
  h6 {
    font-size: 17px;
    line-height: 26px;
    letter-spacing: -0.42500000000000004px;
    padding: 13px 0;
  }
}

p, h5 {
  font-size: 16px;
  line-height: 24px;
  letter-spacing: -0.4px;
  padding: 12px 0;
}
@media (min-width: 320px) {
  p, h5 {
    font-size: 18px;
    line-height: 27px;
    letter-spacing: -0.45px;
    padding: 14px 0;
  }
}
@media (min-width: 480px) {
  p, h5 {
    font-size: 19px;
    line-height: 29px;
    letter-spacing: -0.47500000000000003px;
    padding: 14px 0;
  }
}
@media (min-width: 768px) {
  p, h5 {
    font-size: 21px;
    line-height: 32px;
    letter-spacing: -0.525px;
    padding: 16px 0;
  }
}
@media (min-width: 960px) {
  p, h5 {
    font-size: 23px;
    line-height: 35px;
    letter-spacing: -0.5750000000000001px;
    padding: 17px 0;
  }
}
@media (min-width: 1140px) {
  p, h5 {
    font-size: 26px;
    line-height: 39px;
    letter-spacing: -0.65px;
    padding: 20px 0;
  }
}
@media (min-width: 320px) {
  p, h5 {
    font-size: 18px;
    line-height: 27px;
    letter-spacing: -0.45px;
    padding: 14px 0;
  }
}
@media (min-width: 480px) {
  p, h5 {
    font-size: 19px;
    line-height: 29px;
    letter-spacing: -0.47500000000000003px;
    padding: 14px 0;
  }
}
@media (min-width: 768px) {
  p, h5 {
    font-size: 21px;
    line-height: 32px;
    letter-spacing: -0.525px;
    padding: 16px 0;
  }
}
@media (min-width: 960px) {
  p, h5 {
    font-size: 23px;
    line-height: 35px;
    letter-spacing: -0.5750000000000001px;
    padding: 17px 0;
  }
}
@media (min-width: 1140px) {
  p, h5 {
    font-size: 26px;
    line-height: 39px;
    letter-spacing: -0.65px;
    padding: 20px 0;
  }
}
@media (min-width: 320px) {
  p, h5 {
    font-size: 18px;
    line-height: 27px;
    letter-spacing: -0.45px;
    padding: 14px 0;
  }
}
@media (min-width: 480px) {
  p, h5 {
    font-size: 19px;
    line-height: 29px;
    letter-spacing: -0.47500000000000003px;
    padding: 14px 0;
  }
}
@media (min-width: 768px) {
  p, h5 {
    font-size: 21px;
    line-height: 32px;
    letter-spacing: -0.525px;
    padding: 16px 0;
  }
}
@media (min-width: 960px) {
  p, h5 {
    font-size: 23px;
    line-height: 35px;
    letter-spacing: -0.5750000000000001px;
    padding: 17px 0;
  }
}
@media (min-width: 1140px) {
  p, h5 {
    font-size: 26px;
    line-height: 39px;
    letter-spacing: -0.65px;
    padding: 20px 0;
  }
}
@media (min-width: 320px) {
  p, h5 {
    font-size: 18px;
    line-height: 27px;
    letter-spacing: -0.45px;
    padding: 14px 0;
  }
}
@media (min-width: 480px) {
  p, h5 {
    font-size: 19px;
    line-height: 29px;
    letter-spacing: -0.47500000000000003px;
    padding: 14px 0;
  }
}
@media (min-width: 768px) {
  p, h5 {
    font-size: 21px;
    line-height: 32px;
    letter-spacing: -0.525px;
    padding: 16px 0;
  }
}
@media (min-width: 960px) {
  p, h5 {
    font-size: 23px;
    line-height: 35px;
    letter-spacing: -0.5750000000000001px;
    padding: 17px 0;
  }
}
@media (min-width: 1140px) {
  p, h5 {
    font-size: 26px;
    line-height: 39px;
    letter-spacing: -0.65px;
    padding: 20px 0;
  }
}
@media (min-width: 320px) {
  p, h5 {
    font-size: 18px;
    line-height: 27px;
    letter-spacing: -0.45px;
    padding: 14px 0;
  }
}
@media (min-width: 480px) {
  p, h5 {
    font-size: 19px;
    line-height: 29px;
    letter-spacing: -0.47500000000000003px;
    padding: 14px 0;
  }
}
@media (min-width: 768px) {
  p, h5 {
    font-size: 21px;
    line-height: 32px;
    letter-spacing: -0.525px;
    padding: 16px 0;
  }
}
@media (min-width: 960px) {
  p, h5 {
    font-size: 23px;
    line-height: 35px;
    letter-spacing: -0.5750000000000001px;
    padding: 17px 0;
  }
}
@media (min-width: 1140px) {
  p, h5 {
    font-size: 26px;
    line-height: 39px;
    letter-spacing: -0.65px;
    padding: 20px 0;
  }
}

h4 {
  font-size: 24px;
  line-height: 36px;
  letter-spacing: -0.6000000000000001px;
  padding: 18px 0;
}
@media (min-width: 320px) {
  h4 {
    font-size: 26px;
    line-height: 39px;
    letter-spacing: -0.65px;
    padding: 20px 0;
  }
}
@media (min-width: 480px) {
  h4 {
    font-size: 29px;
    line-height: 44px;
    letter-spacing: -0.7250000000000001px;
    padding: 22px 0;
  }
}
@media (min-width: 768px) {
  h4 {
    font-size: 32px;
    line-height: 48px;
    letter-spacing: -0.8px;
    padding: 24px 0;
  }
}
@media (min-width: 960px) {
  h4 {
    font-size: 35px;
    line-height: 53px;
    letter-spacing: -0.8749999999999999px;
    padding: 26px 0;
  }
}
@media (min-width: 1140px) {
  h4 {
    font-size: 39px;
    line-height: 59px;
    letter-spacing: -0.9750000000000001px;
    padding: 29px 0;
  }
}
@media (min-width: 320px) {
  h4 {
    font-size: 26px;
    line-height: 39px;
    letter-spacing: -0.65px;
    padding: 20px 0;
  }
}
@media (min-width: 480px) {
  h4 {
    font-size: 29px;
    line-height: 44px;
    letter-spacing: -0.7250000000000001px;
    padding: 22px 0;
  }
}
@media (min-width: 768px) {
  h4 {
    font-size: 32px;
    line-height: 48px;
    letter-spacing: -0.8px;
    padding: 24px 0;
  }
}
@media (min-width: 960px) {
  h4 {
    font-size: 35px;
    line-height: 53px;
    letter-spacing: -0.8749999999999999px;
    padding: 26px 0;
  }
}
@media (min-width: 1140px) {
  h4 {
    font-size: 39px;
    line-height: 59px;
    letter-spacing: -0.9750000000000001px;
    padding: 29px 0;
  }
}
@media (min-width: 320px) {
  h4 {
    font-size: 26px;
    line-height: 39px;
    letter-spacing: -0.65px;
    padding: 20px 0;
  }
}
@media (min-width: 480px) {
  h4 {
    font-size: 29px;
    line-height: 44px;
    letter-spacing: -0.7250000000000001px;
    padding: 22px 0;
  }
}
@media (min-width: 768px) {
  h4 {
    font-size: 32px;
    line-height: 48px;
    letter-spacing: -0.8px;
    padding: 24px 0;
  }
}
@media (min-width: 960px) {
  h4 {
    font-size: 35px;
    line-height: 53px;
    letter-spacing: -0.8749999999999999px;
    padding: 26px 0;
  }
}
@media (min-width: 1140px) {
  h4 {
    font-size: 39px;
    line-height: 59px;
    letter-spacing: -0.9750000000000001px;
    padding: 29px 0;
  }
}
@media (min-width: 320px) {
  h4 {
    font-size: 26px;
    line-height: 39px;
    letter-spacing: -0.65px;
    padding: 20px 0;
  }
}
@media (min-width: 480px) {
  h4 {
    font-size: 29px;
    line-height: 44px;
    letter-spacing: -0.7250000000000001px;
    padding: 22px 0;
  }
}
@media (min-width: 768px) {
  h4 {
    font-size: 32px;
    line-height: 48px;
    letter-spacing: -0.8px;
    padding: 24px 0;
  }
}
@media (min-width: 960px) {
  h4 {
    font-size: 35px;
    line-height: 53px;
    letter-spacing: -0.8749999999999999px;
    padding: 26px 0;
  }
}
@media (min-width: 1140px) {
  h4 {
    font-size: 39px;
    line-height: 59px;
    letter-spacing: -0.9750000000000001px;
    padding: 29px 0;
  }
}
@media (min-width: 320px) {
  h4 {
    font-size: 26px;
    line-height: 39px;
    letter-spacing: -0.65px;
    padding: 20px 0;
  }
}
@media (min-width: 480px) {
  h4 {
    font-size: 29px;
    line-height: 44px;
    letter-spacing: -0.7250000000000001px;
    padding: 22px 0;
  }
}
@media (min-width: 768px) {
  h4 {
    font-size: 32px;
    line-height: 48px;
    letter-spacing: -0.8px;
    padding: 24px 0;
  }
}
@media (min-width: 960px) {
  h4 {
    font-size: 35px;
    line-height: 53px;
    letter-spacing: -0.8749999999999999px;
    padding: 26px 0;
  }
}
@media (min-width: 1140px) {
  h4 {
    font-size: 39px;
    line-height: 59px;
    letter-spacing: -0.9750000000000001px;
    padding: 29px 0;
  }
}

h3 {
  font-size: 36px;
  line-height: 54px;
  letter-spacing: -0.9px;
  padding: 27px 0;
}
@media (min-width: 320px) {
  h3 {
    font-size: 40px;
    line-height: 60px;
    letter-spacing: -1px;
    padding: 30px 0;
  }
}
@media (min-width: 480px) {
  h3 {
    font-size: 44px;
    line-height: 66px;
    letter-spacing: -1.1px;
    padding: 33px 0;
  }
}
@media (min-width: 768px) {
  h3 {
    font-size: 48px;
    line-height: 72px;
    letter-spacing: -1.2000000000000002px;
    padding: 36px 0;
  }
}
@media (min-width: 960px) {
  h3 {
    font-size: 53px;
    line-height: 80px;
    letter-spacing: -1.3250000000000002px;
    padding: 40px 0;
  }
}
@media (min-width: 1140px) {
  h3 {
    font-size: 58px;
    line-height: 87px;
    letter-spacing: -1.4500000000000002px;
    padding: 44px 0;
  }
}
@media (min-width: 320px) {
  h3 {
    font-size: 40px;
    line-height: 60px;
    letter-spacing: -1px;
    padding: 30px 0;
  }
}
@media (min-width: 480px) {
  h3 {
    font-size: 44px;
    line-height: 66px;
    letter-spacing: -1.1px;
    padding: 33px 0;
  }
}
@media (min-width: 768px) {
  h3 {
    font-size: 48px;
    line-height: 72px;
    letter-spacing: -1.2000000000000002px;
    padding: 36px 0;
  }
}
@media (min-width: 960px) {
  h3 {
    font-size: 53px;
    line-height: 80px;
    letter-spacing: -1.3250000000000002px;
    padding: 40px 0;
  }
}
@media (min-width: 1140px) {
  h3 {
    font-size: 58px;
    line-height: 87px;
    letter-spacing: -1.4500000000000002px;
    padding: 44px 0;
  }
}
@media (min-width: 320px) {
  h3 {
    font-size: 40px;
    line-height: 60px;
    letter-spacing: -1px;
    padding: 30px 0;
  }
}
@media (min-width: 480px) {
  h3 {
    font-size: 44px;
    line-height: 66px;
    letter-spacing: -1.1px;
    padding: 33px 0;
  }
}
@media (min-width: 768px) {
  h3 {
    font-size: 48px;
    line-height: 72px;
    letter-spacing: -1.2000000000000002px;
    padding: 36px 0;
  }
}
@media (min-width: 960px) {
  h3 {
    font-size: 53px;
    line-height: 80px;
    letter-spacing: -1.3250000000000002px;
    padding: 40px 0;
  }
}
@media (min-width: 1140px) {
  h3 {
    font-size: 58px;
    line-height: 87px;
    letter-spacing: -1.4500000000000002px;
    padding: 44px 0;
  }
}
@media (min-width: 320px) {
  h3 {
    font-size: 40px;
    line-height: 60px;
    letter-spacing: -1px;
    padding: 30px 0;
  }
}
@media (min-width: 480px) {
  h3 {
    font-size: 44px;
    line-height: 66px;
    letter-spacing: -1.1px;
    padding: 33px 0;
  }
}
@media (min-width: 768px) {
  h3 {
    font-size: 48px;
    line-height: 72px;
    letter-spacing: -1.2000000000000002px;
    padding: 36px 0;
  }
}
@media (min-width: 960px) {
  h3 {
    font-size: 53px;
    line-height: 80px;
    letter-spacing: -1.3250000000000002px;
    padding: 40px 0;
  }
}
@media (min-width: 1140px) {
  h3 {
    font-size: 58px;
    line-height: 87px;
    letter-spacing: -1.4500000000000002px;
    padding: 44px 0;
  }
}
@media (min-width: 320px) {
  h3 {
    font-size: 40px;
    line-height: 60px;
    letter-spacing: -1px;
    padding: 30px 0;
  }
}
@media (min-width: 480px) {
  h3 {
    font-size: 44px;
    line-height: 66px;
    letter-spacing: -1.1px;
    padding: 33px 0;
  }
}
@media (min-width: 768px) {
  h3 {
    font-size: 48px;
    line-height: 72px;
    letter-spacing: -1.2000000000000002px;
    padding: 36px 0;
  }
}
@media (min-width: 960px) {
  h3 {
    font-size: 53px;
    line-height: 80px;
    letter-spacing: -1.3250000000000002px;
    padding: 40px 0;
  }
}
@media (min-width: 1140px) {
  h3 {
    font-size: 58px;
    line-height: 87px;
    letter-spacing: -1.4500000000000002px;
    padding: 44px 0;
  }
}

h2 {
  font-size: 54px;
  line-height: 81px;
  letter-spacing: -1.35px;
  padding: 41px 0;
}
@media (min-width: 320px) {
  h2 {
    font-size: 59px;
    line-height: 89px;
    letter-spacing: -1.475px;
    padding: 44px 0;
  }
}
@media (min-width: 480px) {
  h2 {
    font-size: 65px;
    line-height: 98px;
    letter-spacing: -1.625px;
    padding: 49px 0;
  }
}
@media (min-width: 768px) {
  h2 {
    font-size: 72px;
    line-height: 108px;
    letter-spacing: -1.8px;
    padding: 54px 0;
  }
}
@media (min-width: 960px) {
  h2 {
    font-size: 79px;
    line-height: 119px;
    letter-spacing: -1.975px;
    padding: 59px 0;
  }
}
@media (min-width: 1140px) {
  h2 {
    font-size: 87px;
    line-height: 131px;
    letter-spacing: -2.1750000000000003px;
    padding: 65px 0;
  }
}
@media (min-width: 320px) {
  h2 {
    font-size: 59px;
    line-height: 89px;
    letter-spacing: -1.475px;
    padding: 44px 0;
  }
}
@media (min-width: 480px) {
  h2 {
    font-size: 65px;
    line-height: 98px;
    letter-spacing: -1.625px;
    padding: 49px 0;
  }
}
@media (min-width: 768px) {
  h2 {
    font-size: 72px;
    line-height: 108px;
    letter-spacing: -1.8px;
    padding: 54px 0;
  }
}
@media (min-width: 960px) {
  h2 {
    font-size: 79px;
    line-height: 119px;
    letter-spacing: -1.975px;
    padding: 59px 0;
  }
}
@media (min-width: 1140px) {
  h2 {
    font-size: 87px;
    line-height: 131px;
    letter-spacing: -2.1750000000000003px;
    padding: 65px 0;
  }
}
@media (min-width: 320px) {
  h2 {
    font-size: 59px;
    line-height: 89px;
    letter-spacing: -1.475px;
    padding: 44px 0;
  }
}
@media (min-width: 480px) {
  h2 {
    font-size: 65px;
    line-height: 98px;
    letter-spacing: -1.625px;
    padding: 49px 0;
  }
}
@media (min-width: 768px) {
  h2 {
    font-size: 72px;
    line-height: 108px;
    letter-spacing: -1.8px;
    padding: 54px 0;
  }
}
@media (min-width: 960px) {
  h2 {
    font-size: 79px;
    line-height: 119px;
    letter-spacing: -1.975px;
    padding: 59px 0;
  }
}
@media (min-width: 1140px) {
  h2 {
    font-size: 87px;
    line-height: 131px;
    letter-spacing: -2.1750000000000003px;
    padding: 65px 0;
  }
}
@media (min-width: 320px) {
  h2 {
    font-size: 59px;
    line-height: 89px;
    letter-spacing: -1.475px;
    padding: 44px 0;
  }
}
@media (min-width: 480px) {
  h2 {
    font-size: 65px;
    line-height: 98px;
    letter-spacing: -1.625px;
    padding: 49px 0;
  }
}
@media (min-width: 768px) {
  h2 {
    font-size: 72px;
    line-height: 108px;
    letter-spacing: -1.8px;
    padding: 54px 0;
  }
}
@media (min-width: 960px) {
  h2 {
    font-size: 79px;
    line-height: 119px;
    letter-spacing: -1.975px;
    padding: 59px 0;
  }
}
@media (min-width: 1140px) {
  h2 {
    font-size: 87px;
    line-height: 131px;
    letter-spacing: -2.1750000000000003px;
    padding: 65px 0;
  }
}
@media (min-width: 320px) {
  h2 {
    font-size: 59px;
    line-height: 89px;
    letter-spacing: -1.475px;
    padding: 44px 0;
  }
}
@media (min-width: 480px) {
  h2 {
    font-size: 65px;
    line-height: 98px;
    letter-spacing: -1.625px;
    padding: 49px 0;
  }
}
@media (min-width: 768px) {
  h2 {
    font-size: 72px;
    line-height: 108px;
    letter-spacing: -1.8px;
    padding: 54px 0;
  }
}
@media (min-width: 960px) {
  h2 {
    font-size: 79px;
    line-height: 119px;
    letter-spacing: -1.975px;
    padding: 59px 0;
  }
}
@media (min-width: 1140px) {
  h2 {
    font-size: 87px;
    line-height: 131px;
    letter-spacing: -2.1750000000000003px;
    padding: 65px 0;
  }
}

h1 {
  font-size: 81px;
  line-height: 122px;
  letter-spacing: -2.025px;
  padding: 61px 0;
}
@media (min-width: 320px) {
  h1 {
    font-size: 89px;
    line-height: 134px;
    letter-spacing: -2.225px;
    padding: 67px 0;
  }
}
@media (min-width: 480px) {
  h1 {
    font-size: 98px;
    line-height: 147px;
    letter-spacing: -2.45px;
    padding: 74px 0;
  }
}
@media (min-width: 768px) {
  h1 {
    font-size: 108px;
    line-height: 162px;
    letter-spacing: -2.7px;
    padding: 81px 0;
  }
}
@media (min-width: 960px) {
  h1 {
    font-size: 119px;
    line-height: 179px;
    letter-spacing: -2.975px;
    padding: 89px 0;
  }
}
@media (min-width: 1140px) {
  h1 {
    font-size: 130px;
    line-height: 195px;
    letter-spacing: -3.25px;
    padding: 98px 0;
  }
}
@media (min-width: 320px) {
  h1 {
    font-size: 89px;
    line-height: 134px;
    letter-spacing: -2.225px;
    padding: 67px 0;
  }
}
@media (min-width: 480px) {
  h1 {
    font-size: 98px;
    line-height: 147px;
    letter-spacing: -2.45px;
    padding: 74px 0;
  }
}
@media (min-width: 768px) {
  h1 {
    font-size: 108px;
    line-height: 162px;
    letter-spacing: -2.7px;
    padding: 81px 0;
  }
}
@media (min-width: 960px) {
  h1 {
    font-size: 119px;
    line-height: 179px;
    letter-spacing: -2.975px;
    padding: 89px 0;
  }
}
@media (min-width: 1140px) {
  h1 {
    font-size: 130px;
    line-height: 195px;
    letter-spacing: -3.25px;
    padding: 98px 0;
  }
}
@media (min-width: 320px) {
  h1 {
    font-size: 89px;
    line-height: 134px;
    letter-spacing: -2.225px;
    padding: 67px 0;
  }
}
@media (min-width: 480px) {
  h1 {
    font-size: 98px;
    line-height: 147px;
    letter-spacing: -2.45px;
    padding: 74px 0;
  }
}
@media (min-width: 768px) {
  h1 {
    font-size: 108px;
    line-height: 162px;
    letter-spacing: -2.7px;
    padding: 81px 0;
  }
}
@media (min-width: 960px) {
  h1 {
    font-size: 119px;
    line-height: 179px;
    letter-spacing: -2.975px;
    padding: 89px 0;
  }
}
@media (min-width: 1140px) {
  h1 {
    font-size: 130px;
    line-height: 195px;
    letter-spacing: -3.25px;
    padding: 98px 0;
  }
}
@media (min-width: 320px) {
  h1 {
    font-size: 89px;
    line-height: 134px;
    letter-spacing: -2.225px;
    padding: 67px 0;
  }
}
@media (min-width: 480px) {
  h1 {
    font-size: 98px;
    line-height: 147px;
    letter-spacing: -2.45px;
    padding: 74px 0;
  }
}
@media (min-width: 768px) {
  h1 {
    font-size: 108px;
    line-height: 162px;
    letter-spacing: -2.7px;
    padding: 81px 0;
  }
}
@media (min-width: 960px) {
  h1 {
    font-size: 119px;
    line-height: 179px;
    letter-spacing: -2.975px;
    padding: 89px 0;
  }
}
@media (min-width: 1140px) {
  h1 {
    font-size: 130px;
    line-height: 195px;
    letter-spacing: -3.25px;
    padding: 98px 0;
  }
}
@media (min-width: 320px) {
  h1 {
    font-size: 89px;
    line-height: 134px;
    letter-spacing: -2.225px;
    padding: 67px 0;
  }
}
@media (min-width: 480px) {
  h1 {
    font-size: 98px;
    line-height: 147px;
    letter-spacing: -2.45px;
    padding: 74px 0;
  }
}
@media (min-width: 768px) {
  h1 {
    font-size: 108px;
    line-height: 162px;
    letter-spacing: -2.7px;
    padding: 81px 0;
  }
}
@media (min-width: 960px) {
  h1 {
    font-size: 119px;
    line-height: 179px;
    letter-spacing: -2.975px;
    padding: 89px 0;
  }
}
@media (min-width: 1140px) {
  h1 {
    font-size: 130px;
    line-height: 195px;
    letter-spacing: -3.25px;
    padding: 98px 0;
  }
}

/*==========  Style Sets Placeholders  ==========*/
h1,
h2,
h3,
h4,
h5,
h6 {
  font-family: Roboto, serif;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  color: #333;
}

p {
  font-family: Open Sans, sans-serif;
}

p {
  color: #111;
}

p {
  letter-spacing: 0;
}

logger-help {
  OFF: "Disable the logger.";
  FATAL: "Severe errors that cause premature termination.";
  ERROR: "Other runtime errors or unexpected conditions.";
  WARN: "Use of deprecated APIs, poor use of API, 'almost' errors,other runtime situations that are undesirable or unexpected, but not necessarily wrong.";
  INFO: "Interesting runtime events (startup/shutdown).";
  DEBUG: "Detailed information on the flow through the system.";
}

.u-cf:after,
.u-clearfix:after {
  content: "";
  display: table;
  clear: both;
}

.u-textLeft {
  text-align: left;
}

.u-textRight {
  text-align: right;
}

.u-textCenter {
  text-align: center;
}

.u-textJustify {
  text-align: justify;
}

.u-textNowrap {
  white-space: nowrap;
}

.u-textLowercase {
  text-transform: lowercase;
}

.u-textUppercase {
  text-transform: uppercase;
}

.u-textCapitalize {
  text-transform: capitalize;
}

.u-marginXs {
  margin: 5px;
}
.u-marginXsNeg {
  margin: -5px;
}

.u-marginXsTop {
  margin-top: 5px;
}
.u-marginXsTopNeg {
  margin-top: -5px;
}

.u-marginXsRight {
  margin-right: 5px;
}
.u-marginXsRightNeg {
  margin-right: -5px;
}

.u-marginXsBottom {
  margin-bottom: 5px;
}
.u-marginXsBottomNeg {
  margin-bottom: -5px;
}

.u-marginXsLeft {
  margin-left: 5px;
}
.u-marginXsLeftNeg {
  margin-left: -5px;
}

.u-marginSm {
  margin: 10px;
}
.u-marginSmNeg {
  margin: -10px;
}

.u-marginSmTop {
  margin-top: 10px;
}
.u-marginSmTopNeg {
  margin-top: -10px;
}

.u-marginSmRight {
  margin-right: 10px;
}
.u-marginSmRightNeg {
  margin-right: -10px;
}

.u-marginSmBottom {
  margin-bottom: 10px;
}
.u-marginSmBottomNeg {
  margin-bottom: -10px;
}

.u-marginSmLeft {
  margin-left: 10px;
}
.u-marginSmLeftNeg {
  margin-left: -10px;
}

.u-marginMd {
  margin: 15px;
}
.u-marginMdNeg {
  margin: -15px;
}

.u-marginMdTop {
  margin-top: 15px;
}
.u-marginMdTopNeg {
  margin-top: -15px;
}

.u-marginMdRight {
  margin-right: 15px;
}
.u-marginMdRightNeg {
  margin-right: -15px;
}

.u-marginMdBottom {
  margin-bottom: 15px;
}
.u-marginMdBottomNeg {
  margin-bottom: -15px;
}

.u-marginMdLeft {
  margin-left: 15px;
}
.u-marginMdLeftNeg {
  margin-left: -15px;
}

.u-marginLg {
  margin: 20px;
}
.u-marginLgNeg {
  margin: -20px;
}

.u-marginLgTop {
  margin-top: 20px;
}
.u-marginLgTopNeg {
  margin-top: -20px;
}

.u-marginLgRight {
  margin-right: 20px;
}
.u-marginLgRightNeg {
  margin-right: -20px;
}

.u-marginLgBottom {
  margin-bottom: 20px;
}
.u-marginLgBottomNeg {
  margin-bottom: -20px;
}

.u-marginLgLeft {
  margin-left: 20px;
}
.u-marginLgLeftNeg {
  margin-left: -20px;
}

.u-marginXl {
  margin: 25px;
}
.u-marginXlNeg {
  margin: -25px;
}

.u-marginXlTop {
  margin-top: 25px;
}
.u-marginXlTopNeg {
  margin-top: -25px;
}

.u-marginXlRight {
  margin-right: 25px;
}
.u-marginXlRightNeg {
  margin-right: -25px;
}

.u-marginXlBottom {
  margin-bottom: 25px;
}
.u-marginXlBottomNeg {
  margin-bottom: -25px;
}

.u-marginXlLeft {
  margin-left: 25px;
}
.u-marginXlLeftNeg {
  margin-left: -25px;
}

.u-marginXxl {
  margin: 30px;
}
.u-marginXxlNeg {
  margin: -30px;
}

.u-marginXxlTop {
  margin-top: 30px;
}
.u-marginXxlTopNeg {
  margin-top: -30px;
}

.u-marginXxlRight {
  margin-right: 30px;
}
.u-marginXxlRightNeg {
  margin-right: -30px;
}

.u-marginXxlBottom {
  margin-bottom: 30px;
}
.u-marginXxlBottomNeg {
  margin-bottom: -30px;
}

.u-marginXxlLeft {
  margin-left: 30px;
}
.u-marginXxlLeftNeg {
  margin-left: -30px;
}

/*===============================
=            Margins            =
===============================*/
/*-----  End of Margins  ------*/
.u-paddingXs {
  padding: 5px;
}

.u-paddingXsTop {
  padding-top: 5px;
}

.u-paddingXsRight {
  padding-right: 5px;
}

.u-paddingXsBottom {
  padding-bottom: 5px;
}

.u-paddingXsLeft {
  padding-left: 5px;
}

.u-paddingSm {
  padding: 10px;
}

.u-paddingSmTop {
  padding-top: 10px;
}

.u-paddingSmRight {
  padding-right: 10px;
}

.u-paddingSmBottom {
  padding-bottom: 10px;
}

.u-paddingSmLeft {
  padding-left: 10px;
}

.u-paddingMd {
  padding: 15px;
}

.u-paddingMdTop {
  padding-top: 15px;
}

.u-paddingMdRight {
  padding-right: 15px;
}

.u-paddingMdBottom {
  padding-bottom: 15px;
}

.u-paddingMdLeft {
  padding-left: 15px;
}

.u-paddingLg {
  padding: 20px;
}

.u-paddingLgTop {
  padding-top: 20px;
}

.u-paddingLgRight {
  padding-right: 20px;
}

.u-paddingLgBottom {
  padding-bottom: 20px;
}

.u-paddingLgLeft {
  padding-left: 20px;
}

.u-paddingXl {
  padding: 25px;
}

.u-paddingXlTop {
  padding-top: 25px;
}

.u-paddingXlRight {
  padding-right: 25px;
}

.u-paddingXlBottom {
  padding-bottom: 25px;
}

.u-paddingXlLeft {
  padding-left: 25px;
}

.u-paddingXxl {
  padding: 30px;
}

.u-paddingXxlTop {
  padding-top: 30px;
}

.u-paddingXxlRight {
  padding-right: 30px;
}

.u-paddingXxlBottom {
  padding-bottom: 30px;
}

.u-paddingXxlLeft {
  padding-left: 30px;
}

/*===============================
=           Paddings            =
===============================*/
/*-----  End of Paddings  ------*/
