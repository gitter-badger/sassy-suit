@function getTypeSet($typeBase, $typeIndexStart, $typeIndexEnd, $typeSizeRatio, $typeLineHeightRatio, $typePaddingRatio, $typeLetterSpacingRatio) {



	@if not val($typeBase, measurePositive) {
		@error #{$typeBase} " is not a measure!";
	}

	@if not val($typeSizeRatio, positive) and $typeSizeRatio > 1 {
		@error #{$typeSizeRatio} " is not a positive integer or float, which is more than 1 !";
	}

	@if not val($typeLineHeightRatio, positive) and $typeSizeRatio > 1 {
		@error #{$typeLineHeightRatio} " is not positive and more than 1 !";
	}

	@if not val($typeLetterSpacingRatio, number) and $typeLetterSpacingRatio != 0 {
		@error #{$typeLetterSpacingRatio} " is not measure or equals 0 !";
	}

	@if not val($typePaddingRatio, number) and $typePaddingRatio > 0 {
		@error #{$typePaddingRatio} " is not measure or equals 0 !";
	}


	@if not val($typeIndexEnd, positive) and val($typeIndexEnd, integer) {
		@error #{$typeIndexEnd} " is not a positive integer !";
	}

	@if (val($typeIndexStart, negative) and val($typeIndexStart, integer) or $typeIndexStart == 0) and $typeIndexStart < $typeIndexEnd {

		$fontSize: ms-list($typeIndexStart,  $typeIndexEnd, $typeBase, $typeSizeRatio);
		@if index($typeRound, size) or
			index($typeRound, fontSize) or
			index($typeRound, font-size) {

			$fontSize: sl-walk($fontSize, round);

		}

		@debug #{$fontSize};

		$lineHeight: sl-walk($fontSize, multiply, $typeLineHeightRatio);
		@debug #{$lineHeight};

		$letterSpacing: sl-walk($fontSize, multiply, $typeLetterSpacingRatio);
		@debug #{$letterSpacing};

		$fontPadding: sl-walk($fontSize, multiply, $typePaddingRatio);

		$fontPadding: sl-walk($fontPadding, divide, 2);

		$fontPadding: sl-walk($fontPadding, append, 0);
		@debug #{$fontPadding};

		@return $fontSize, $lineHeight, $letterSpacing, $fontPadding;

	} @else {
		@error #{$typeIndexStart} " is not 0 or a negative integer !";
	}

	// @if (val($typePaddingRatio, positive) and $typePaddingRatio > 1 {
	// 	$padding: ms-list($typeIndexStart, $typeIndexEnd, $typeBase, $typePaddingRatio);

	// 	@debug #{$typePaddingRatio};

	// 	$lineHeight: sl-walk($fontSize, multiply, $typeLineHeightRatio);

	// 	@debug #{$lineHeight};

	// 	$letterSpacing: sl-walk($fontSize, multiply, $typeLetterSpacingRatio);

	// 	@debug #{$letterSpacing};

	// 	@return $fontSize, $lineHeight, $letterSpacing;

	// } @else {
	// 	@error #{$typeIndexStart} " is not 0 or negative integer !";
	// }


	@return "THE END";

	// `ms-generate-list($Value, $Bases, $Ratios)` - calculate list, `Ratios` - maybe a list of values, which will return comma seperate multi-level list

};



$getTypeSet: getTypeSet($typeBase, $typeIndexStart, $typeIndexEnd, $typeSizeRatio, $typeLineHeightRatio, $typePaddingRatio, $typeLetterSpacingRatio);

$fontSize: nth($getTypeSet, 1);

$lineHeight: nth($getTypeSet, 2);

$letterSpacing: nth($getTypeSet, 3);

$fontPadding: nth($getTypeSet, 4);

.typeSetStatic {
	font-size: $fontSize;
	line-height: $lineHeight;
	letter-spacing: $letterSpacing;
	padding: $fontPadding;
};


