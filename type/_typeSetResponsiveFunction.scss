@function getTypeSetResponsive($typeBps, $typeBpsRatios) {

	// check for equal length and valid values
	@if length($typeBps) == length($typeBpsRatios) and
		length($typeBps) == 1 and
		val($typeBps, measurePositive) and
		val($typeBpsRatios, positive) {

		@debug "There is a single break point - measurePositive and a single break point ratio - positive";

		@return "getTypeSetResponsive - 1";

	} @else if length($typeBps) == length($typeBpsRatios) and
	 	length($typeBps) > 1 and
	 	val($typeBps, list) and
		index(sl-walk($typeBps, val, measurePositive), false) != true and
		$typeBps == sl-sort($typeBps) and
		val($typeBpsRatios, list) and
		index(sl-walk($typeBpsRatios, val, number), false) != true and
		$typeBpsRatios == sl-sort($typeBpsRatios) {

		$typeSetResponsive: () !global;

		@for $i from 1 through length($typeBpsRatios) {
			// get recalculated $typeSetResponsiveRatios
			$ratioBp: nth(getTypeSetResponsiveRatios($typeBpsRatios), $i) !global;
			@debug $ratioBp "$ratioBp" "_____________________________________________________";
			// $typeSetResponsiveBp: getTypeSet($typeBase * $ratio, $typeIndexStart, $typeIndexEnd, $typeSizeRatio, $typeLineHeightRatio, $typePaddingRatio, $typeLetterSpacingRatio) !global;

				@debug $i "$i" "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++";
				$typeSetResponsiveBp: getTypeSet($typeBase * $ratioBp, $typeIndexStart, $typeIndexEnd, $typeSizeRatio, $typeLineHeightRatio, $typePaddingRatio, $typeLetterSpacingRatio);
				@debug $typeSetResponsiveBp "$typeSetResponsiveBp" "++++++++++++++++++++++++++++++++++++++++++++++++++++++";

				// $m: ();
				// $m: map-set($m, key, hello world this is map);
				// $m: map-set($m, key2, hello world this is map 2);


				// h1 {
				//   m: map-get($m, key);
				//   m: map-get($m, key2);
				//   m: map-values($m), map-keys($m);
				// }

				$typeSetResponsive: append($typeSetResponsive, $typeSetResponsiveBp, comma) !global;
				@debug $typeSetResponsive "$typeSetResponsive" "/////////////////////////////////////////////////////////";

		}

		@debug "There are multiple break points with positiveMeasure values and break point ratios with positive values and they are all properly sorted";
		@debug $typeSet;
		// @debug $typeSetResponsiveBp;
		@debug $typeSetResponsive;

		@debug "font-size: " nth(nth($typeSetResponsive, 1), 1);
		@debug "line-height: " nth(nth($typeSetResponsive, 2), 1);
		@debug "letter-spacing: " nth(nth($typeSetResponsive, 3), 1);
		@debug "padding: " nth(nth($typeSetResponsive, 4), 1);

		@return #{$typeSetResponsive};

	} @else {
		@error "Number of break points and number of break points ratios has to be equal";

		@return false;

	}

	@error "Something went wrong!";

	@return false;

}

.TYPE_SET_RESPONSIVE {
	typeSet: $typeSet;
	typeSetResponsive: getTypeSetResponsive($typeBps, $typeBpsRatios);
	x: $ratioBp;
}
