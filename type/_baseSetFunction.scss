// $type: (
// 	base: 					16px,
// 	indexStart: 			-2,
// 	indexEnd: 				8,
// 	sizeRatio: 				1.4,
// 	lineHeightRatio: 		1.1,
// 	paddingRatio: 			1.1,
// 	letterSpacingRatio: 	-.02,
// 	outputStyle: 			static,
// 	bps: 					( sm, md, lg, xl, xxl ),
// 	bpsRatios: 				( 1.1, 1.1, 1.1, 1.1, 1.1 ),
// 	liquidRatio: 			2
// );


@function multiply($value, $multiplier) {
	$new-value: $value * $multiplier;

  	@return $new-value;

}

@function divide($value, $divider) {
	$new-value: $value / $divider;

  	@return $new-value;

}

@function getTypeSet($typeBase, $typeIndexStart, $typeIndexEnd, $typeSizeRatio, $typeLineHeightRatio, $typePaddingRatio, $typeLetterSpacingRatio) {

	@if val($typeBase, measurePositive) {}
	@else {
		@error #{$typeBase} " is not a measure!";
	}

	@if val($typeSizeRatio, positive) and $typeSizeRatio > 1 {}
	@else {
		@error #{$typeSizeRatio} " is not a positive integer or float, which is more than 1 !";
	}

	@if val($typeLineHeightRatio, positive) and $typeSizeRatio > 1 {}
	@else {
		@error #{$typeLineHeightRatio} " is not positive and more than 1 !";
	}

	@if val($typeLetterSpacingRatio, number) and $typeLetterSpacingRatio != 0 {}
	@else {
		@error #{$typeLetterSpacingRatio} " is not measure or equals 0 !";
	}

	@if val($typePaddingRatio, number) and $typePaddingRatio > 0 {}
	@else {
		@error #{$typePaddingRatio} " is not measure or equals 0 !";
	}

	@if val($typeIndexEnd, positive) and val($typeIndexEnd, integer) {}
	@else {
		@error #{$typeIndexEnd} " is not a positive integer !";
	}

	@if (val($typeIndexStart, negative) and val($typeIndexStart, integer) or $typeIndexStart == 0) and $typeIndexStart < $typeIndexEnd {
		$fontSize: ms-list($typeIndexStart,  $typeIndexEnd, $typeBase, $typeSizeRatio);

		@warn #{$fontSize};

		$lineHeight: sl-walk($fontSize, multiply, $typeLineHeightRatio);

		@warn #{$lineHeight};

		$letterSpacing: sl-walk($fontSize, multiply, $typeLetterSpacingRatio);

		@warn #{$letterSpacing};

		$fontPadding: sl-walk($fontSize, multiply, $typePaddingRatio);

		$fontPadding: sl-walk($fontPadding, divide, 2);

		$fontPadding: sl-walk($fontPadding, append, 0);

		@warn #{$fontPadding};

		@return $fontSize, $lineHeight, $letterSpacing, $fontPadding;

	} @else {
		@error #{$typeIndexStart} " is not 0 or negative integer !";
	}

	// @if (val($typePaddingRatio, positive) and $typePaddingRatio > 1 {
	// 	$padding: ms-list($typeIndexStart, $typeIndexEnd, $typeBase, $typePaddingRatio);

	// 	@warn #{$typePaddingRatio};

	// 	$lineHeight: sl-walk($fontSize, multiply, $typeLineHeightRatio);

	// 	@warn #{$lineHeight};

	// 	$letterSpacing: sl-walk($fontSize, multiply, $typeLetterSpacingRatio);

	// 	@warn #{$letterSpacing};

	// 	@return $fontSize, $lineHeight, $letterSpacing;

	// } @else {
	// 	@error #{$typeIndexStart} " is not 0 or negative integer !";
	// }


	@return "THE END";

	// `ms-generate-list($Value, $Bases, $Ratios)` - calculate list, `Ratios` - maybe a list of values, which will return comma seperate multi-level list

};



$getTypeSet: getTypeSet($typeBase, $typeIndexStart, $typeIndexEnd, $typeSizeRatio, $typeLineHeightRatio, $typePaddingRatio, $typeLetterSpacingRatio);

$fontSize: nth($getTypeSet, 1);

$lineHeight: nth($getTypeSet, 2);

$letterSpacing: nth($getTypeSet, 3);

$fontPadding: nth($getTypeSet, 4);

.baseSet {
	font-size: $fontSize;
	line-height: $lineHeight;
	letter-spacing: $letterSpacing;
	padding: $fontPadding;
};


