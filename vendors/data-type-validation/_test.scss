.testDataTypeValidation {
 	bool: validate(true, bool);
 	bool: validate(false, bool);
 	bool: validate(100px, bool);
 	bool: validate(hello, bool);
 	bool: validate("string", bool);

 	color: validate(red, color);
 	color: validate(#BADA55, color);
 	color: validate(#eee, color);
 	color: validate(true, color);
 	color: validate(false, color);
 	color: validate(777rem, color);
 	color: validate("Lorem Ipsum", color);

	empty: validate(unquote(''), empty);
	empty: validate(unquote(""), empty);
	empty: validate("", empty);
	empty: validate('', empty);
	empty: validate((), empty);
	empty: validate(red, empty);
 	empty: validate(#BADA55, empty);
 	empty: validate(#eee, empty);
 	empty: validate(true, empty);
 	empty: validate(false, empty);
 	empty: validate(777rem, empty);
 	empty: validate("Lorem Ipsum", empty);

	list: validate(11 33 44 44 55, list);
	list: validate('12' '23' '33', list);
	list: validate(11, 33, 44, 44, 55, list);
	list: validate('12', '23', '33', list);
	list: validate(unquote(''), list);
	list: validate(unquote(""), list);
	list: validate("", list);
	list: validate('', list);
	list: validate((), list);
	list: validate(red, list);
 	list: validate(#BADA55, list);
 	list: validate(#eee, list);
 	list: validate(true, list);
 	list: validate(false, list);
 	list: validate(777rem, list);
 	list: validate("Lorem Ipsum", list);


	null: validate(null, null);
	null: validate(unquote("null"), null);
	null: validate(unquote('null'), null);
	null: validate(unquote(''), null);
	null: validate(unquote(""), null);
	null: validate('null', null);
	null: validate(11 33 44 44 55, null);
	null: validate('12' '23' '33', null);
	null: validate(11, 33, 44, 44, 55, null);
	null: validate('12', '23', '33', null);
	null: validate("", null);
	null: validate('', null);
	null: validate((), null);
	null: validate(red, null);
 	null: validate(#BADA55, null);
 	null: validate(#eee, null);
 	null: validate(true, null);
 	null: validate(false, null);
 	null: validate(777rem, null);
 	null: validate("Lorem Ipsum", null);

// * number +
// * measure +
// * string +
// * unit +
// * integer +
// * float +
// * positive +
// * negative +
// * negativeMeasure +
// * positiveMeasure +
}
