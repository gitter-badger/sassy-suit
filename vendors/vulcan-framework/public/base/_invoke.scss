/**
 * calls a function after requires and parameters are checked for validity
 * ---
 * @access public
 * ---
 * @group base
 * ---
 * @since 1.0.0
 * ---
 * @requires _v-invoke
 * @requires validate
 * ---
 * @param {string} $callback  - function to call without braces
 * @param {map}    $conf (()) - configuration object defining params, types and requires
 * ---
 * @return {callback}
 * ---
 * @example
 *  $conf: (
 *      params: $value,
 *      types: any
 *  ):
 *  invoke(unit-strip, $conf); 
 * @example
 *  $conf: (
 *    params: $list,
 *    types: list string //$list must be list or string
 *  );
 * invoke(list-count-values, $conf);
 * @example
 * $conf: (
 *     params: ($list, $function, $args),
 *     types: (list, string, args), //$list must be list, $function must be string, $args must be args
 * );
 * invoke(sl-some,$conf);
 */

@function invoke($callback, $conf:()) {
    $conf: map-merge((
        params: false,
        types: false,
        requires: false
    ), $conf);
    $params: map-get($conf, params);
    $types: map-get($conf, types);
    $requires: map-get($conf, requires);

    @if $requires and not validate($requires, list string) {
        @return throw('"#{$requires}" is no valid input for `$requires` of function `invoke`.');
    }
    @if not validate($callback, string) {
        @return throw('"#{$callback}" is no valid input for `$callback` of function `invoke`.');
    }
    @return _v-invoke($callback, $conf);
}