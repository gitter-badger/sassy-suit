/**
 * validates input against various tests
 * ---
 * @requires is-bool
 * @requires is-color
 * @requires is-empty
 * @requires is-list
 * @requires is-measure
 * @requires is-null
 * @requires is-number
 * @requires is-string
 * @requires is-unit
 * ---
 * @group checks
 * ---
 * @param {literal}Â           $var         - a variable to be tested
 * @param {list|string|'any'}Â $validations - the validations to test (e.g. measure, string, number, unit). "any" means it can be any type so there won't be any kind of test.
 * ---
 * @return {bool}
 * ---
 * @throws '$var is not a known validation type.'
 * ---
 * @example
 *  validate(1em, measure)     //returns 1em
 * @example
 *  validate(em, unit string)  //returns em
 * @example
 *  validate(1, number string) //returns 1
 * @example
 *  validate(1, number)        //returns 1
 * @example
 *  validate(1, string)        //returns false
 * ---
 * @since 1.0.0
 */

@function validate($var, $validations) {
    //do not test anything if type equals "any"
    @if $validations == any {
        @return true;
    }

    //if there is more than one validation test
    @if length($validations) > 1 {
        //break function if validation is not a known data type
        @each $validation in $validations {
            @if not index($DATA-TYPES, $validation) {
                @warn '#{$validation} is not a known validation type.';
                @return false;
            }
        }
    }

    //collect validation errors
    $errors: ();
    //check each validation and set 1 for each failure
    @each $validation in $validations {
        @if $validation == measure {
            @if not is-measure($var) {
                $errors: append($errors, 1);
            }
        }

        @else if $validation == list {
            @if not is-list($var) {
                $errors: append($errors, 1);
            }
        }

        @else if $validation == color {
            @if not is-color($var) {
                $errors: append($errors, 1);
            }
        }

        @else if $validation == bool {
            @if not is-bool($var) {
                $errors: append($errors, 1);
            }
        }

        @else if $validation == null {
            @if not is-null($var) {
                $errors: append($errors, 1);
            }
        }

        @else if $validation == string {
            @if not is-string($var) {
                $errors: append($errors, 1);
            }
        }

        @else if $validation == number {
            @if not is-number($var) {
                $errors: append($errors, 1);
            }
        }

        @else if $validation == numeric {
            @if not is-numeric($var) {
                $errors: append($errors, 1);
            }
        }

        @else if $validation == integer {
            @if not is-integer($var) {
                $errors: append($errors, 1);
            }
        }

        @else if $validation == float {
            @if not is-float($var) {
                $errors: append($errors, 1);
            }
        }

        @else if $validation == positive {
            @if not is-positive($var) {
                $errors: append($errors, 1);
            }
        }

        @else if $validation == negative {
            @if not is-negative($var) {
                $errors: append($errors, 1);
            }
        }

        @else if $validation == unit {
            @if not is-unit($var) {
                $errors: append($errors, 1);
            }
        }
        //as we checked earlier $validation must be one of our data types
        //so this condition my never be encountered but just in case..return false
        @else {
            @return false;
        }
    }

    //throw an error if there are as many validation errors as validation tests because all checked types failed
    @if length($errors) >= length($validations) {
        @return false;
    }
    //at least one of tested types must be valid
    @else {
        @return true;
    }
}
