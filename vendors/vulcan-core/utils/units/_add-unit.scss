@function __addUnit($number, $unit) {
    @if $unit == 'px' {
        @return $number * 1px;
    }
    @else if $unit == 'cm' {
        @return $number * 1cm;
    }
    @else if $unit == 'mm' {
        @return $number * 1mm;
    }
    @else if $unit == '%' {
        @return $number * 1%;
    }
    @else if $unit == 'ch' {
        @return $number * 1ch;
    }
    @else if $unit == 'pica' {
        @return $number * 1pica;
    }
    @else if $unit == 'in' {
        @return $number * 1in;
    }
    @else if $unit == 'em' {
        @return $number * 1em;
    }
    @else if $unit == 'rem' {
        @return $number * 1rem;
    }
    @else if $unit == 'pt' {
        @return $number * 1pt;
    }
    @else if $unit == 'pc' {
        @return $number * 1pc;
    }
    @else if $unit == 'ex' {
        @return $number * 1ex;
    }
    @else if $unit == 'vw' {
        @return $number * 1vw;
    }
    @else if $unit == 'vh' {
        @return $number * 1vh;
    }
    @else if $unit == 'vmin' {
        @return $number * 1vmin;
    }
    @else if $unit == 'vmax' {
        @return $number * 1vmax;
    } @else {
        @return false;
    }
}

/**
 * adds a unit to a number
 *
 * @requires __addUnit
 * @requires v-invoke
 *
 * @param {number} $number - number to add unit
 * @param {unit}   $unit   - unit that will be applied (e.g. px, em..)
 *
 * @return {measure}
 *
 * @since 1.0.0
 */

@function v-addUnit($number, $unit) {
    @return v-invoke(
        $params: ($number, $unit),
        $types: (number, unit),
        $callback: __addUnit
    );
}