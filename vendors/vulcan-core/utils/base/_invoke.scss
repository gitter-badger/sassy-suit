/**
 * calls a function after requires and parameters are checked for validity
 *
 * @since 1.0.0
 *
 * @requires v-missingDependencies
 * @requires v-validate
 * @requires __invalidParameterException
 *
 * @param {argList}     $params             - parameters to pass for callback
 * @param {string}      $callback           - function to call without braces
 * @param {string|list} $types              - types of the parameters that are passed to callback
 * @param {string|list} $requires (nothing) - list dependencies of a function
 *
 * @throws Sorry, you entered invalid parameter for $params of v-invoke
 * @throws Sorry, you entered invalid parameter for $callback of v-invoke
 * @throws Sorry, you entered invalid parameter for $types of v-invoke
 * @throws Sorry, you entered invalid parameter for $requires of v-invoke
 *
 * @return {function|false}
 *
 * @example
 *  v-invoke(
 *      $params: $selector,
 *      $types: list,
 *      $callback: __selector_containsModifier,
 *      $requires: v-selector_parseAsString
 *   );
 *  v-invoke(
 *      $params: ($selector1, $selector2), //multiple parameters
 *      $types: (list, string), //first param is list, second is string
 *      $callback: __selector_containsModifier,
 *      $requires: v-selector_parseAsString
 *   );
 *  v-invoke(
 *      $params: ($selector1, $selector2),
 *      $types: (number measure, string), //first param is number or measure, second is string
 *      $callback: __selector_containsModifier,
 *      $requires: v-selector_parseAsString
 *   );
 */

@function v-invoke($params, $types, $callback, $requires:nothing) {
    $errors: ();
    @if not v-validate($requires, list string) {
        $errors: append($errors, __invalidParameterException(v-invoke, requires));
    }
    @if not v-validate($callback, string) {
        $errors: append($errors, __invalidParameterException(v-invoke, callback));
    }
    $multipleTypes: false;
    @if list-separator($types) == 'comma' {
        $multipleTypes: true;
    }
    @if $multipleTypes {
        @if length($types) != length($params) {
            $errors: append($errors, '$types of v-invoke does not match number of parameters');
        }
    }
    @if length($errors) == 0 {
        //there are no errors in invoke so check for dependencies
        $dependencies: v-validate, __invalidParameterException, $callback;
        //if there are any further requirements, add these to the dependencies
        @if $requires != 'nothing' {
            @each $item in $requires {
                $dependencies: append($dependencies, $item);
            }
        }
        //loop through each dependency and check whether its missing
        $dependencyErrors: ();
        @if v-missingDependencies($dependencies) {
            $dependencyErrors: append($dependencyErrors, 1);
        }
        //if all dependencies are met..
        @if length($dependencyErrors) == 0 {
            $userFunctionErrors: ();

            $args: ();
            //create a map $arg that contains $param: $type
            $n: 1;
            @each $param in $params {
                @if $multipleTypes {
                    $args: map-merge($args, ($param: nth($types, $n)));
                } @else {
                    $args: map-merge($args, ($param: $types));
                }
                $n: $n+1;
            }

            //check every param for its type
            @each $param, $type in $args {
                @if $type != 'any' {
                    @if not v-validate($param, $type) {
                        $userFunctionErrors: append($userFunctionErrors, __invalidParameterException($callback));
                    }
                }
            }

            @if length($userFunctionErrors) == 0 {
                @return call($callback, $params...);
            } @else {
                @each $userFunctionError in $userFunctionErrors {
                    @warn $userFunctionError;
                }
                @return false;
            }
        } @else {
            @each $dependency in $dependencies {
                @warn v-missingDependencies($dependencies);
            }
            @return false;
        }

    } @else {
        @each $error in $errors {
            @warn $error;
        }
        @return false;
    }
}