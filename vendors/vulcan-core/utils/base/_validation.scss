/**
 * tests whether type of a variable is a unit.
 *
 * @param {value} $var - a variable to be tested
 *
 * @return {$var|false}
 *
 * @since 1.0.0
 */

@function v-validateUnit($var) {
    @if type-of($var) == bool or $var == null {
        @return false;
    }
    @if type-of($var) == number {
        @return false;
    }
    @else if not index($v-UNITS, $var) and type-of($var) == string {
        @return false;
    } @else {
        @return $var;
    }
}

/**
 * tests whether type of a variable is a number with a unit.
 *
 * @since 1.0.0
 *
 * @param {value} $var - a variable to be tested
 *
 * @return {$var|false}
 *
 * @example
 *  v-validateMeasure(1em) //true
 *  v-validateMeasure(1cm) //true
 *  v-validateMeasure(cm) //false
 *  v-validateMeasure(50) //false
 *  v-validateMeasure(5jam) //false
 */

@function v-validateMeasure($var) {
    @if type-of($var) == bool or $var == null {
        @return false;
    }
    $error: false;
    @if type-of($var) == number {
        @if unitless($var) {
            @return false;
        }
    }
    @if type-of($var) != number {
        @return false;
    }
    @if not index($v-UNITS, unit($var)) {
        @return false;
    }
    @else {
        @return $var;
    }
}


/**
 * tests whether type of a variable is a number.
 *
 * @param {value} $var - a variable to be tested
 *
 * @return {$var|false}
 *
 * @since 1.0.0
 */

@function v-validateNumber($var) {
    @if v-validateMeasure($var) {
        @return false;
    }
    @else if type-of($var) != number {
        @return false;
    }
    @else {
        @return $var;
    }
}

/**
 * tests whether type of a variable is a string.
 *
 * @param {value} $var - a variable to be tested
 *
 * @return {$var|false}
 *
 * @since 1.0.0
 */

@function v-validateString($var) {
    @if v-validateMeasure($var) {
        @return false;
    }
    @if type-of($var) != string {
        @return false;
    } @else {
        @return $var;
    }
}

/**
 * tests whether type of a variable is a color.
 *
 * @param {value} $var - a variable to be tested
 *
 * @return {$var|false}
 *
 * @since 1.0.0
 */

@function v-validateColor($var) {
    @if type-of($var) != color {
        @return false;
    } @else {
        @return $var;
    }
}

/**
 * tests whether type of a variable is a boolean.
 *
 * @param {value} $var - a variable to be tested
 *
 * @return {$var|false}
 *
 * @since 1.0.0
 */

@function v-validateBool($var) {
    @if type-of($var) != bool {
        @return false;
    } @else {
        @return $var;
    }
}

/**
 * tests whether type of a variable is null.
 *
 * @param {value} $var - a variable to be tested
 *
 * @return {$var|false}
 *
 * @since 1.0.0
 */

@function v-validateNull($var) {
    @if type-of($var) != null {
        @return false;
    } @else {
        @return $var;
    }
}

/**
 * tests whether type of a variable is a list.
 *
 * @param {value} $var - a variable to be tested
 *
 * @return {$var|false}
 *
 * @since 1.0.0
 */

@function v-validateList($var) {
    @if type-of($var) != list {
        @return false;
    }
    @else {
        @return $var;
    }
}

/**
 * validates input against various tests and return the variable if one of those tests is passed
 *
 * @requires sl-contain
 * @requires to-list
 * @requires v-validateMeasure
 * @requires v-validateBool
 * @requires v-validateList
 * @requires v-validateString
 * @requires v-validateNumber
 * @requires v-validateUnit
 *
 * @param {value} $var | a variable to be tested
 * @param {list|string|any} $validations | the validations to test (e.g. measure, string, number, unit). "any" means it can be any type so there won't be any kind of test.
 *
 * @return {$var|false}
 *
 * @example
 *  v-validate(1em, measure) //returns 1em
 *  v-validate(em, unit string) //returns em
 *  v-validate(1, number string) //returns 1
 *  v-validate(1, number) //returns 1
 *  v-validate(1, string) //returns  false
 *
 * @since 1.0.0
 */

@function v-validate($var, $validations) {
    //set a list of testable validation types
    $allTypes: measure, list, bool, string, color, number, unit;

    //collect errors
    $errors: ();

    //do not test anything if type equals "any"
    @if $validations == any {
        @return $var;
    }

    $allValidations: to-list($validations);

    @each $type in $allTypes {
        @if not sl-contain($allValidations, $type) { //set an error if validations do not contain any of testable types
            $errors: append($errors, 1);
        }
    }

    //if there are no invalid types for validation...
    @if length($errors) > 0 {


        //collect validation errors
        $validationErrors: ();
        //check each validation and set 1 for each failure
        @each $validation in $allValidations {
            @if $validation == measure {
                @if not v-validateMeasure($var) {
                    $validationErrors: append($validationErrors, 1);
                }
            }

            @else if $validation == list {
                @if not v-validateList($var) {
                    $validationErrors: append($validationErrors, 1);
                }
            }

            @else if $validation == color {
                @if not v-validateColor($var) {
                    $validationErrors: append($validationErrors, 1);
                }
            }

            @else if $validation == bool {
                @if not v-validateBool($var) {
                    $validationErrors: append($validationErrors, 1);
                }
            }

            @else if $validation == null {
                @if not v-validateNull($var) {
                    $validationErrors: append($validationErrors, 1);
                }
            }

            @else if $validation == string {
                @if not v-validateString($var) {
                    $validationErrors: append($validationErrors, 1);
                }
            }

            @else if $validation == number {
                @if not v-validateNumber($var) {
                    $validationErrors: append($validationErrors, 1);
                }
            }

            @else if $validation == unit {
                @if not v-validateUnit($var) {
                    $validationErrors: append($validationErrors, 1);
                }
            } @else {
                @warn 'Unknown validation type';
                @return false;
            }
        }

        //throw an error if there are as many validation errors as validation tests because all checked types failed
        @if length($validationErrors) == length($allValidations) {
            @warn 'Sorry, you entered "#{$var}", which is no valid input. Until you fixed this bug the returned value will be false.';
            @return false;
        }
        //at least one of tested types must be valid
        @else {
            @return $var;
        }


    } @else { //if there is an invalid type for validation...
        @warn 'Sorry, you entered "#{$var}", which is not a known validation type (measure, string, number or unit). Until you fixed this bug the returned value will be false.';
        @return false;
    }
}
