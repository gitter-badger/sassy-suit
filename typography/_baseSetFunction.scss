// $typo: (
// 	base: 					16px,
// 	indexStart: 			-2,
// 	indexEnd: 				8,
// 	sizeRatio: 				1.4,
// 	lineHeightRatio: 		1.1,
// 	paddingRatio: 			1.1,
// 	letterSpacingRatio: 	-.02,
// 	outputStyle: 			static,
// 	bps: 					( sm, md, lg, xl, xxl ),
// 	bpsRatios: 				( 1.1, 1.1, 1.1, 1.1, 1.1 ),
// 	liquidRatio: 			2
// );

// $typoLineHeightRatio, $typoPaddingRatio, $typoLetterSpacingRatio

@function getBaseSet($typoBase, $typoIndexStart, $typoIndexEnd, $typoSizeRatio) {

	@if val($typoBase, measurePositive) {}
	@else {
		@error #{$typoBase} " is not a measure!";
	}

	@if val($typoSizeRatio, positive) and $typoSizeRatio > 1 {}
	@else {
		@error #{$typoSizeRatio} " is not a positive integer or float, which is more than 1 !";
	}

	@if val($typoIndexEnd, positive) and val($typoIndexEnd, integer) {}
	@else {
		@error #{$typoIndexEnd} " is not a positive integer !";
	}

	@if (val($typoIndexStart, negative) and val($typoIndexStart, integer) or $typoIndexStart == 0) and $typoIndexStart < $typoIndexEnd {
		$baseSet: ms-list($typoIndexStart,  $typoIndexEnd, $typoBase, $typoSizeRatio);
		@warn #{$baseSet};
		@return $baseSet;
	} @else {
		@error #{$typoIndexStart} " is not 0 or negative integer !";
	}



	@return "THE END";

	// `ms-generate-list($Value, $Bases, $Ratios)` - calculate list, `Ratios` - maybe a list of values, which will return comma seperate multi-level list

};

.baseSetFunction {
	content: getBaseSet($typoBase, $typoIndexStart, $typoIndexEnd, $typoSizeRatio);
};


