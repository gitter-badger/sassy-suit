/*====================================
=            Break points            =
====================================*/

$breakpoints: (
	xs:   					250px,
	sm:   					300px,
	md:   					450px,
	lg:   					650px,
	xl:   					900px,
	xxl: 					1200px
);

/*-----  End of Break points  ------*/



/*===============================
=            Margins            =
===============================*/

$margins: (
	Xs:   					5px,
	Sm:   					10px,
	Md:   					15px,
	Lg:   					20px,
	Xl:   					25px,
	Xxl: 					30px
);

$marginDirections: (
	base: 					"",
	top: 					"Top",
	right: 					"Right",
	bottom: 				"Bottom",
	left: 					"Left"
);

/*-----  End of Margins  ------*/



/*================================
=            Paddings            =
================================*/

$paddings: (
	Xs:   					5px,
	Sm:   					10px,
	Md:   					15px,
	Lg:   					20px,
	Xl:   					25px,
	Xxl: 					30px
);

$paddingDirections: (
	base: 					"",
	top: 					"Top",
	right: 					"Right",
	bottom: 				"Bottom",
	left: 					"Left"
);

/*-----  End of Paddings  ------*/




/*==================================
=            Typography            =
==================================*/

$type: (
	indexBegin: 			-2,
	indexEnd: 				6,
	base: 					16px,
	sizeRatio: 				1.5,
	lineHeightRatio: 		1.5,
	paddingRatio: 			1.5,
	letterSpacingRatio: 	-.025,
	outputStyle: 			responsive,
	bps: 					320px 480px 768px 960px 1140px,
	bpsRatios: 				1.1 1.1 1.1 1.1 1.1,
	liquidRatio: 			1.5,
	liquidBps: 				(300px 400px),
	round: 					(fontSize, lineHeight, padding),
	webFonts: (
		header: 				"Roboto",
		headerBold: 			"Roboto: 700",
		headerLight: 		  	"Roboto: 300",
		headerItalic: 			"Roboto: 400, italic",
		headerAlt:  			"Nunito",
		text: 					"Open Sans",
		textBold: 				"Open Sans: 700",
		textLight: 				"Open Sans: 300",
		textItalic: 			"Open Sans: 400, italic",
		textAlt: 				"Dosis"
	),
	fontFamilies: (
		header: 				"Roboto, serif",
		headerAlt: 				"Nunito, serif",
		text: 					"Open Sans, sans-serif",
		textAlt:  				"Dosis, sans-serif"
	)
);

/*-----  End of Typography  ------*/




/*============================
=            Grid            =
============================*/

// Breakpoints {auto | custom}
//
// Gutters {fluid | static | custom}
// baseGutter - gutter value for all the future math
// defaultGutter - is used with gutters - static
// Ratio {auto | custom} - `map-get($type, sizeRatio)`
// Output {responsive | static} - gutters, rows, containers, etc

// @todo how to generate valid gutter size for $susy map ?

$grid: (
	columns: 					12,
	breakpoints: 				auto,
	bpNames: 					'xs' 'sm' 'md' 'lg' 'xl' 'xxl',
	bpValues: 					320px 480px 620px 768px 960px 1120px 1200px,
	containers: 				auto,
	containerNames: 			'xs' 'sm' 'md' 'lg' 'xl' 'xxl' 'fluid',
	gutters: 					auto,
	gutterBase: 				5px,
	gutterRatio: 				auto,
	gutterDefault: 				15px,
	gutterNames: 				'xs' 'sm' 'md' 'lg' 'xl' 'xxl',
	gutterValues: 				5px 10px 15px 20px 25px 30px,
	round: 						true,
	output: 					responsive,
	debug: 						true
);

/*-----  End of Grid  ------*/

$susy: (
  flow: ltr,
  math: fluid,
  output: float,
  gutter-position: inside-static,
  container: 1200px,
  container-position: center,
  columns: 12,
  gutters: .1 * 2,
  column-width: 50px,
  last-flow: to,
  debug: (
    image: show,
    color: rgba(red, .25),
    output: background,
    toggle: top right,
  ),
  use-custom: (
    background-image: true,
    background-options: false,
    box-sizing: true,
    clearfix: false,
    rem: true,
  )
);
