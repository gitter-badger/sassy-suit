/**
*
* Google Web Fonts string serialize function.
*
* @group WebFonts
*
* @author Vova Skok
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_typeSetWebFontsFunction.scss
*
* @require val
* @require webFontsSerialize
* @require webFontsImplode
* @require webFontsStringReplace
* @require webFontsURLEncode
*
* @param {List | String} $fonts - stores list of font values
*
* @throw Unsupported font type
* @throw $fonts was not validated as a map with string data type keys and values
* @throw $fonts was not validated as a list with string values
*
* @return {String}
*
*/

@function webFontsSerialize($fonts) {

	@if type-of($fonts) == 'list' or type-of($fonts) == 'arglist' {
		$serialized: ();

		@each $font in $fonts {
			@if val($font, string) {
				$serialized: append($serialized, webFontsSerialize($font));
			} @else {

				@error #{$fonts} " - $fonts was not validated as a list with string values"

			}
		}

		@return webFontsImplode($serialized, '|');

	}

	@if type-of($fonts) == 'map' {

		$serialized: ();

		@each $family, $variants in $fonts {
			@if val($family, string) and val($variants, string) {
				$variants: webFontsImplode($variants, ',');
				$variants: webFontsStringReplace($variants, ' ', '');
				$serialized: append($serialized, "#{$family}:#{$variants}");
			} 	@else {

					@error "$fonts was not validated as a map with string data type keys and values"

			}
		}

		@return webFontsSerialize($serialized);

	}

	@if type-of($fonts) == 'string' {

		@return webFontsURLEncode($fonts);

	}

	@warn "Unsupported font type: #{type-of($fonts)}";

}
