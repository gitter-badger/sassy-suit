/**
*
* Core typography function, which validates and calculates base values for:
	- `font-size`
	- `line-height`
	- `letter-spacing`
	- `padding`
*
* Has option to `round` selected values
*
* @author Vova Skok
*
* @group Type
*
* @link https://github.com/SassySuit/sassySuit/blob/master/tools/type/_typeSetFunction.scss
*
* @param {Number} $typeBase - core value
* @param {Number} $typeIndexBegin - list's starting point
* @param {Number} $typeIndexEnd - list's last point
* @param {Number} $typeSizeRatio - `font-size` ratio value
* @param {Number} $typeLineHeightRatio - `line-height` ratio value
* @param {Number} $typePaddingRatio - `padding` ratio value
* @param {Number} $typeLetterSpacingRatio - `letter-spacing` ratio value
*
* @require val
* @require ms-list
* @require sl-walk
* @require multiply
* @require divide
*
* @throw `$typeBase` - is not a measure!
* @throw `$typeSizeRatio` - is not a positive integer or float, which is more than 1!
* @throw `$typeLineHeightRatio` - is not positive and more than 1!
* @throw `$typeLetterSpacingRatio` - is not a positive integer or float, which is more than 1!
* @throw `$typeLetterSpacingRatio` - is not measure or equals 0!
* @throw `$typePaddingRatio` - is not measure or equals 0!
* @throw `$typeIndexBegin` - is not measure or equals 0!
* @throw `$typeIndexBegin` - is not 0 or a negative integer!
* @throw `$typeIndexEnd` - is not a positive integer!
*
* @return {List}
*
*/

@function typeSet($typeBase, $typeIndexBegin, $typeIndexEnd, $typeSizeRatio, $typeLineHeightRatio, $typePaddingRatio, $typeLetterSpacingRatio) {

	@if not val($typeBase, measurePositive) {
		@error #{$typeBase} " is not a measure!";
	}

	@if not val($typeSizeRatio, positive) and $typeSizeRatio > 1 {
		@error #{$typeSizeRatio} " is not a positive integer or float, which is more than 1 !";
	}

	@if not val($typeLineHeightRatio, positive) and $typeSizeRatio > 1 {
		@error #{$typeLineHeightRatio} " is not positive and more than 1 !";
	}

	@if not val($typeLetterSpacingRatio, number) and $typeLetterSpacingRatio != 0 {
		@error #{$typeLetterSpacingRatio} " is not measure or equals 0 !";
	}

	@if not val($typePaddingRatio, number) and $typePaddingRatio > 0 {
		@error #{$typePaddingRatio} " is not measure or equals 0 !";
	}


	@if not val($typeIndexEnd, positive) and val($typeIndexEnd, integer) {
		@error #{$typeIndexEnd} " is not a positive integer !";
	}

	@if (val($typeIndexBegin, negative) and val($typeIndexBegin, integer) or $typeIndexBegin == 0) and $typeIndexBegin < $typeIndexEnd {

		// Validating and rounding each value in $fontSize
		// add multiple possible truthy values
		$fontSize: ms-list($typeIndexBegin, $typeIndexEnd, $typeBase, $typeSizeRatio);
		@if index($typeRound, fontSize) or
			index($typeRound, font-size) or
			index($typeRound, size) {

			$fontSize: sl-walk($fontSize, round);

		}

		$lineHeight: sl-walk($fontSize, multiply, $typeLineHeightRatio);
		@if index($typeRound, lineHeight) or
			index($typeRound, line-height) {

			$lineHeight: sl-walk($lineHeight, round);

		}

		// Validating and rounding each value in $letterSpacing
		// add multiple possible truthy values
		$letterSpacing: sl-walk($fontSize, multiply, $typeLetterSpacingRatio);
		@if index($typeRound, letterSpacing) or
			index($typeRound, letter-spacing) {

			$letterSpacing: sl-walk($letterSpacing, round);

		}

		$fontPadding: sl-walk($fontSize, multiply, $typePaddingRatio);
		$fontPadding: sl-walk($fontPadding, divide, 2);

		@if index($typeRound, fontPadding) or
			index($typeRound, padding) or
			index($typeRound, font-padding) {

			$fontPadding: sl-walk($fontPadding, round);

		}

		$fontPadding: sl-walk($fontPadding, append, 0);

		@return $fontSize, $lineHeight, $letterSpacing, $fontPadding;

	} @else {
		@error #{$typeIndexBegin} " is not 0 or a negative integer !";
	}

};
