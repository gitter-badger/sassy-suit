// liquidRatio: 			2,
// liquidBps: 				(320px 640px),

// $typeLiquidRatio: 			map-get($type, liquidRatio);
// $typeLiquidBps: 				map-get($type, liquidBps);


@function typeSetLiquidRatiosFunction($typeLiquidBps, $typeLiquidRatio) {

	$count: strip-units(nth($typeLiquidBps, 2) - nth($typeLiquidBps, 1));

	$countProduct: $count;

	@for $i from 1 through $count {
		$countProduct: append($countProduct, nth($countProduct, length($countProduct)) * $count );
	}

	$countProduct: nth($countProduct, length($countProduct));

	@debug COUNTPRODUCT $countProduct;

	$typeLiquidBpRatio: $typeLiquidRatio / $countProduct + 1;
	// $typeLiquidBpRatio: math-precision($typeLiquidBpRatio, 10);

	@debug typeLiquidBpRatio - $typeLiquidBpRatio;

	$rawLiquidBps: $typeLiquidBpRatio;

	@for $i from 1 through $count {
		$rawLiquidBps: append($rawLiquidBps, $typeLiquidBpRatio) ;
	}

	@debug rawLiquidBps - $rawLiquidBps;
	@debug length($rawLiquidBps);

	$typeSetResponsiveRatios: getTypeSetResponsiveRatios($rawLiquidBps);

	@return $typeSetResponsiveRatios;

	// $typeSetLiquidRatios: nth($rawLiquidBps, 1);

	// $typeBpsRatios deep validation
	// @if val($rawLiquidBps, list) {

	// 	@debug #{$typeBpsRatios} "was validated as a list";

	// 	@for $n from 1 through $count {
	// 		@if val(nth($rawLiquidBps, $n), positive) {

	// 			@debug "Each rawLiquidBps of "#{$rawLiquidBps} "was validated as a number";

	// 			@for $i from 1 through $count {

	// 				@if $i == 1 {
	// 					$typeSetLiquidRatios: nth($rawLiquidBps, 1);
	// 				} @else {
	// 					$newRawLiquidBps: nth($rawLiquidBps, $i) * nth($typeSetLiquidRatios, length($typeSetLiquidRatios));
	// 					$typeSetLiquidRatios: append($typeSetLiquidRatios, $newRawLiquidBps);
	// 				}
	// 			}

	// 			@return $typeSetLiquidRatios;
	// 		}
	// 	}

	// 	@return $typeSetLiquidRatios;

	// }

}

$typeSetLiquidRatios: typeSetLiquidRatiosFunction($typeLiquidBps, $typeLiquidRatio);

echo {
	count: $typeSetLiquidRatios;
}
