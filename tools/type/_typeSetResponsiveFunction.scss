@function getTypeSetResponsive($typeBps, $typeBpsRatios) {

	// check for equal length and valid values
	@if length($typeBps) == length($typeBpsRatios) and
		length($typeBps) == 1 and
		val($typeBps, measurePositive) and
		val($typeBpsRatios, positive) {

		@debug "There is a single break point - measurePositive and a single break point ratio - positive";

		@return "getTypeSetResponsive - 1";

	} @else if length($typeBps) == length($typeBpsRatios) and
	 	length($typeBps) > 1 and
	 	val($typeBps, list) and
		index(sl-walk($typeBps, val, measurePositive), false) != true and
		$typeBps == sl-sort($typeBps) and
		val($typeBpsRatios, list) and
		index(sl-walk($typeBpsRatios, val, number), false) != true and
		$typeBpsRatios == sl-sort($typeBpsRatios) {

			$typeSetResponsive: () !global;

			@for $i from 1 through length($typeBpsRatios) {
				// get recalculated $typeSetResponsiveRatios
				$ratioBp: nth(getTypeSetResponsiveRatios($typeBpsRatios), $i) !global;

				$typeSetResponsiveBp: typeSet($typeBase * $ratioBp, $typeIndexBegin, $typeIndexEnd, $typeSizeRatio, $typeLineHeightRatio, $typePaddingRatio, $typeLetterSpacingRatio);
				$typeSetResponsive: map-set($typeSetResponsive, $i, $typeSetResponsiveBp) !global;

			}

			@debug "There are multiple break points with positiveMeasure values and break point ratios with positive values and they are all properly sorted";

			@return $typeSetResponsive;

	} @else {
		@error "Number of break points and number of break points ratios has to be equal";

		@return false;

	}

	@error "Something went wrong!";

	@return false;

}

$typeSetResponsive:  getTypeSetResponsive($typeBps, $typeBpsRatios) !global;
