// ----
// Sass (v3.4.9)
// Compass (v1.0.1)
// ----

// http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass/12335841#12335841
// https://github.com/sass/sass/issues/533

$UNITS: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';

@function is_bool($var) {
	@if type-of($var) == bool {
		@return true;
	} @else {
		@return false;
	}
}

@function is_color($var) {
	@if type-of($var) == color {
		@return true;
	} @else {
		@return false;
	}
}

@function is_null($var) {
	@if $var == null {
		@return true;
	} @else {
		@return false;
	}
}

@function is_empty($var) {
	@if type-of($var) == list and
		length($var) == 0 {
		@return true;
	} @else if $var == null  {
		@return true;
	} @else if type-of($var) == string and
		str-length($var) == 0 {
		@return true;
	} @else {
		@return false;
	}
}

@function is_map($var) {
	@if type-of($var) == map {
		@return true;
	}
	@else {
		@return false;
	}
}

@function is_list($var) {
	@if type-of($var) == list {
		@return true;
	}
	@else {
		@return false;
	}
}

@function is_measure($var) {
	@if type-of($var) == number {
		@if unitless($var) {
			@return false;
		}
	}
	@else {
		@return false;
	}
	@if not index($UNITS, unit($var)) {
		@return false;
	}
	@else {
		@return true;
	}
}

@function is_number($var) {
	@if type-of($var) == number {
		@return unitless($var);
	}
	@else {
		@return false;
	}
}

@function is_string($var) {
	@if type-of($var) != string {
		@return false;
	} @else {
		@return true;
	}
}

@function is_unit($var) {
	@if type-of($var) == string {
		@return if(index($UNITS, $var), true, false);
	} @else {
		@return false;
	}
}

@function is-integer($var) {
    @if not is-number($var) {
        @return false;
    }
    @if round($var) != $var {
        @return false;
    }
    @return true;
}

@function is-float($var) {
    @if $var == 0 {
        @return false;
    }
    @if not is-number($var) {
        @return false;
    }
    @if not is-integer($var) {
        @return true;
    }
    @return false;
}

@function is_negative($var) {
	@if (type-of($var) == number) and $var < 0 {
		@return true;
	} @else {
		@return false;
	}
}

@function is-positive($var) {
    @if is-number($var) and $var > 0 {
        @return true;
    } @else {
        @return false;
    }
}

@function is-measurePositive($var) {
	@if is-measure($var) and $var > 0 {
		@return true;
	} @else {
		@return false;
	}
}

@function is-measureNegative($var) {
	@if is-measure($var) and is-negative($var) {
		@return true;
	} @else {
		@return false;
	}
}

@function validate($var, $validations) {
	//set a list of testable validation types
	$allTypes: measure, list, bool, string, color, number, unit, negative, positive, integer, float, measurePositive, measureNegative;

	//do not test anything if type equals "any"
	@if $validations == any {
		@return true;
	}

	//if there is more than one validation test
	@if length($validations) > 1 {
		//break function if validation is not a known data type
		@each $validation in $validations {
			@if not index($allTypes, $validation) {
				@warn '#{$validation} is not a known validation type.';
				@return false;
			}
		}
	}

	//collect validation errors
	$errors: ();
	//check each validation and set 1 for each failure
	@each $validation in $validations {
		@if $validation == measure {
			@if not is_measure($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == list {
			@if not is_list($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == color {
			@if not is_color($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == bool {
			@if not is_bool($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == null {
			@if not is_null($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == string {
			@if not is_string($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == number {
			@if not is_number($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == unit {
			@if not is_unit($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == integer {
			@if not is_integer($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == float {
			@if not is_float($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == negative {
			@if not is_negative($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == positive {
			@if not is_positive($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == measureNegative {
			@if not is_measureNegative($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == measurePositive {
			@if not is_measurePositive($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == map {
			@if not is_map($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == empty {
			@if not is_empty($var) {
				$errors: append($errors, 1);
			}
		}

		//as we checked earlier $validation must be one of our data types
		//so this condition my never be encountered but just in case..return false
		@else {
			@return false;
		}
	}

	//throw an error if there are as many validation errors as validation tests because all checked types failed
	@if length($errors) >= length($validations) {
		@return false;
	}
	//at least one of tested types must be valid
	@else {
		@return true;
	}
}

@function val($var, $validations) {

	@return validate($var, $validations);

}

ECHO {
  bool: val(false, bool);
	color: val(#BADa55, color);
	empty: val((), empty);
	list: val(121 666 9931 88, list);
	map: val((a: 1, b: 2), map);
	measure: val(100px, measure);
	null: val(null, null);
	number: val(1313, number);
	string: val(hello, string);
	unit: val(rem, unit);
	integer: val(6, integer);
	float: val(1212.3333, float);
	positive: val(14, positive);
	negative: val(-777, negative);
	measureNegative: val(-555px, measureNegative);
	measurePositive: val(2424vh, measurePositive);
}


