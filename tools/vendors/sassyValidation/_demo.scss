$UNITS: 'px' 'cm' 'mm' '%' 'ch' 'pica' 'in' 'em' 'rem' 'pt' 'pc' 'ex' 'vw' 'vh' 'vmin' 'vmax';

// bool
@function is_bool($var) {
	@if type-of($var) == bool {

		@return true;

	} @else {

		@return false;

	}
}

// color
@function is_color($var) {
	@if type-of($var) == color {

		@return true;

	} @else {

		@return false;

	}
}

// empty
@function is_empty($var) {
	@if type-of($var) == string {

		@return str-length($var) == 0;

	}
	@if type-of($var) == number {

		@return $var != 0;

	}
	@if type-of($var) == list {

		@return length($var) == 0;

	}
	@if $var == false {

		@return true;

	}
	@if $var == null {

		@return true;

	}
}

// list
@function is_list($var) {
	@if type-of($var) == list {

		@return true;

	}
	@else {

		@return false;

	}
}

// map
@function is_map($var) {
	@if type-of($var) == map {

		@return true;

	}
	@else {

		@return false;

	}
}

// measure
@function is_measure($var) {
	@if type-of($var) == number {
		@if unitless($var) {

			@return false;

		}
	}
	@else {

		@return false;

	}
	@if not index($UNITS, unit($var)) {

		@return false;


	}
	@else {

		@return true;

	}
}

// null
@function is_null($var) {
	@if $var == null {

		@return true;

	} @else {

		@return false;

	}
}

// number
@function is_number($var) {
	@if type-of($var) == number {

		@return unitless($var);

	}
	@else {

		@return false;

	}
}

// string
@function is_string($var) {
	@if type-of($var) != string {

		@return false;

	} @else {

		@return true;

	}
}

// unit
@function is_unit($var) {
	@if type-of($var) == string {

		@return if(index($UNITS, $var), true, false);

	} @else {

		@return false;

	}
}

// integer
@function is-integer($var) {
    @if not is-number($var) {

        @return false;

    }
    @if round($var) != $var {

        @return false;

    }

    @return true;

}

// float
@function is-float($var) {
	@if $var == 0 {

		@return false;

	}
	@if not is-number($var) {

		@return false;

	}
	@if not is-integer($var) {

		@return true;

	}

	@return false;

}

// positive
@function is-positive($var) {
    @if is-number($var) and $var > 0 == true {

        @return true;

    } @else if $var == 0 {
		@warn "Number is not positive! Number equals zero";

		@return false;

    } @else {

        @return false;

    }
}

// negative
@function is_negative($var) {
	@if (type-of($var) == number) and $var < 0 == true {

		@return true;

	} @else {

		@return false;

	}
}

// measureNegative
@function is-measureNegative($var) {
	@if is-measure($var) and $var < 0 {

		@return true;

	} @else if is-measure($var) and $var == 0 {

		@warn "Using zero value with units is a lame idea";

		@return false;

	} @else {

		@return false;

	}
}

// measurePositive
@function is-measurePositive($var) {
	@if is-measure($var) and $var > 0 {

		@return true;

	} @else if is-measure($var) and $var == 0 {

		@warn "Using zero value with units is a lame idea";

		@return false;

	} @else {

		@return false;

	}
}

// validation
@function validate($var, $validations) {
	//set a list of testable validation types

	$allTypes: bool, color, empty, float, integer, list, map, measure, measureNegative, measurePositive, negative, null, number, positive, string, unit;

	//do not test anything if type equals "any"
	@if $validations == any {

		@return true;

	}

	//if there is more than one validation test
	@if length($validations) > 1 {
		//break function if validation is not a known data type
		@each $validation in $validations {
			@if not index($allTypes, $validation) {

				@warn '#{$validation} is not a known validation type.';

				@return false;

			}
		}
	}

	//collect validation errors
	$errors: ();
	//check each validation and set 1 for each failure
	@each $validation in $validations {
		@if $validation == measure {
			@if not is_measure($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == list {
			@if not is_list($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == color {
			@if not is_color($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == bool {
			@if not is_bool($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == null {
			@if not is_null($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == string {
			@if not is_string($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == number {
			@if not is_number($var) {
				$errors: append($errors, 1);
			}
		}

		@else if $validation == unit {
			@if not is_unit($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == integer {
			@if not is_integer($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == float {
			@if not is_float($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == negative {
			@if not is_negative($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == positive {
			@if not is_positive($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == map {
			@if not is_map($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == measureNegative {
			@if not is_measureNegative($var) {
				$errors: append($errors, 1);
			}
		}
		@else if $validation == measurePositive {
			@if not is_measurePositive($var) {
				$errors: append($errors, 1);
			}
		}

		//as we checked earlier $validation must be one of our data types
		//so this condition my never be encountered but just in case..return false
		@else {

			@return false;

		}
	}

	//throw an error if there are as many validation errors as validation tests because all checked types failed
	@if length($errors) >= length($validations) {

		@return false;

	}
	//at least one of tested types must be valid
	@else {

		@return true;

	}
}

// Short alias for `validate` function
@function val($var, $validations) {

	@return validate($var, $validations);

}

// val
@function val($var, $validations) {

	@return validate($var, $validations);

}
