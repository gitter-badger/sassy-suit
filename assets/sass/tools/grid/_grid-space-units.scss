@mixin grid-space-units($layout: $grid) {
	@if grid-validation($layout) {

		$bp-sizing-output: map-get($layout, bp-sizing-output);
		$space-units: map-get($layout, space-units);
		$space-unit-fallback: map-get($layout, space-unit-fallback);

		$ms: map-get($layout, ms);
		$ms-base: map-get($layout, ms-base);
		$ms-ratio: map-get($layout, ms-ratio);
		$ms-round: map-get($layout, ms-round);

		$list-size: length(map-keys($breakpoints));

		@warn $ms $ms-base $ms-ratio $ms-round $list-size;

		@if $bp-sizing-output and $ms {

			@debug "$bp-sizing-output and $ms-base";

			$grid-space-units: ms-list(0, length(map-keys($breakpoints)) - 1, $ms-base, $ms-ratio) !global;

			// @debug $grid-space-units '||||||||||';

		} @else if $bp-sizing-output and (not $ms) and $space-units {

			$grid-space-units: $space-units !global;

			// @debug $grid-space-units '|||||||||| - static';


		} @else if not $bp-sizing-output and $space-unit-fallback {

			$grid-space-units: $space-unit-fallback !global;

			// @debug $grid-space-units '|||||||||| - fallback';

		}
	} @else {

		@error '#{$layout} is invalid argument for `grid-space-units` function';

	}
}

TEST-grid-space-units {
	@include grid-space-units();

	content: $grid-space-units;
}
