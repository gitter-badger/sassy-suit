// $grid: (
// 	'columns': 12,
// 	'bp-value-flow': true,
// 	'sizing-output': true,
// 	'bp-sizing-output': true,
//  'direction-output': true,
// 	'ms': true,
// 	'ms-base': 5px,
// 	'ms-ratio': 1.5,
// 	'ms-round': true,
// 	'space-units': 5px 10px 15px 20px 25px 30px,
// 	'space-unit-fallback': 15px,
// 	'containers': 300px 450px 600px 700px 900px 1100px,
// 	'containers-fluid': 400px 550px 700px 800px 1000px 1200px,
// 	'bp-class-names': 'xs' 'sm' 'md' 'lg' 'xl' 'xxl',
// 	'space-unit-class-names': 'xs' 'sm' 'md' 'lg' 'xl' 'xxl',
// 	'direction-class-names': 'before' 'after',
// 	'gutter-class-name': 'gutters',
// 	'row-class-name': 'row',
// 	'container-class-name': 'container',
// 	'container-fluid-class-name': 'container-fluid',
// );

@function grid-validation($map: $grid) {
	@debug $map;

	@if val($map, map) {
		$columns: map-get($map, columns);
		$ms: map-get($map, ms);
		$ms-base: map-get($map, ms-base);
		$ms-ratio: map-get($map, ms-ratio);
		$ms-round: map-get($map, ms-round);
		$bp-value-flow: map-get($map, bp-value-flow);
		$sizing-output: map-get($map, sizing-output);
		$bp-sizing-output: map-get($map, bp-sizing-output);
		$direction-output: map-get($map, direction-output);
		$pull-output: map-get($map, pull-output);
		$push-output: map-get($map, push-output);
		$offset-output: map-get($map, offset-output);
		$space-units: map-get($map, space-units);
		$space-unit-fallback: map-get($map, space-unit-fallback);
		$containers: map-get($map, containers);
		$containers-fluid: map-get($map, containers-fluid);
		// $bp-class-names: map-get($map, bp-class-names);
		// $space-unit-class-names: map-get($map, space-unit-class-names);
		// $direction-class-names: map-get($map, direction-class-names);
		// $gutter-class-name: map-get($map, gutter-class-name);
		// $row-class-name: map-get($map, row-class-name);
		// $container-class-name: map-get($map, container-class-name);
		// $container-fluid-class-name: map-get($map, container-fluid-class-name);

	@debug 'DEBUG:::' $columns $ms $ms-base $ms-ratio $ms-round $bp-value-flow $sizing-output $bp-sizing-output $direction-output $pull-output $push-output $offset-output $space-units $space-unit-fallback $containers $containers-fluid;

// 		val($ms-ratio, number) and val($ms-ratio, positive)
//   	val($ms-round, bool) and
//   	val($bp-value-flow, bool) and
//   	val($sizing-output, bool) and
//   	val($bp-sizing-output, bool) and
//   	val($direction-output, bool) and
//   	val($pull-output, bool) and
//   	val($push-output, bool) and
//   	val($offset-output, bool) and
//   	val($space-units, list) and
//   	val($space-unit-fallback, measurePositive) and
//   	val($containers, list) and
//   	val($containers-fluid, list)

	@if not val($columns, integer) and val($columns, positive) {

		@error #{$columns} "is invalid value of `grid.columns`";

	} @else if not val($ms, bool) {

		@error #{$ms} "is invalid value of `grid.ms`";

	} @else if not val($ms-base, measurePositive) {

		@error #{$ms-base} "is invalid value of `grid.ms-base`";

	} @else if not (val($ms-ratio, number) and val($ms-ratio, positive) ) {

		@error #{$ms-ratio} "is invalid value of `grid.ms-ratio`";

	} @else if not val($ms-round, bool) {

		@error #{$ms-round} "is invalid value of `grid.ms-round`";

	} @else if not val($bp-value-flow, bool) {

		@error #{$bp-value-flow} "is invalid value of `grid.bp-value-flow`";

	} @else if val($columns, integer) and val($columns, positive) and
		val($ms, bool) and
		val($ms-base, measurePositive) and
		val($ms-ratio, number) and val($ms-ratio, positive) and
		val($ms-round, bool) and
		val($bp-value-flow, bool) {

			@return true;

    	}

	} @else {

		@return false;

    }

	// // columns
	// @if val($columns, integer) and val($columns, positive) {
	// } @else {
	// 	@error #{$columns} "is invalid value of `grid.columns`";
	// }

	// // ms
	// @if val($ms, bool) {
	// 	@if val($ms-base, measurePositive) {
	// 	} @else {
	// 		@error #{$ms-base} "is invalid value of `grid.ms-base`";
	// 	}

	// 	@if val($ms-ratio, number) and val($ms-ratio, positive) {
	// 	} @else {
	// 		@error #{$ms-ratio} "is invalid value of `grid.ms-ratio`";
	// 	}

	// 	@if val($ms-round, bool) {
	// 	} @else {
	// 		@error #{$ms-round} "is invalid value of `grid.ms-round`";
	// 	}
	// } @else {

	// 	// bp-value-flow
	// 	@if val($bp-value-flow, bool) {
	// 	} @else {
	// 		@error #{$bp-value-flow} "is invalid value of `grid.bp-value-flow`";
	// 	}

	// 	// sizing-output
	// 	@if val($sizing-output, bool) {
	// 	} @else {
	// 		@error #{$sizing-output} "is invalid value of `grid.sizing-output`";
	// 	}

	// 	// bp-sizing-output
	// 	@if val($bp-sizing-output, bool) {
	// 	} @else {
	// 		@error #{$bp-sizing-output} "is invalid value of `grid.bp-sizing-output`";
	// 	}

	// 	// direction-output
	// 	@if val($direction-output, bool) {
	// 	} @else {
	// 		@error #{$direction-output} "is invalid value of `grid.direction-output`";
	// 	}

	// 	// pull-output
	// 	@if val($pull-output, bool) {
	// 	} @else {
	// 		@error #{$pull-output} "is invalid value of `grid.pull-output`";
	// 	}

	// 	// push-output
	// 	@if val($push-output, bool) {
	// 	} @else {
	// 		@error #{$push-output} "is invalid value of `grid.push-output`";
	// 	}

	// 	// offset-output
	// 	@if val($offset-output, bool) {
	// 	} @else {
	// 		@error #{$offset-output} "is invalid value of `grid.offset-output`";
	// 	}

	// 	// space-units
	// 	@if val($space-units, list) and sl-walk($space-units, val, positiveMeasure) {
	// 	} @else {
	// 		@error #{$space-units} "is invalid value of `grid.space-units`";
	// 	}

	// 	@if val($space-unit-fallback, measurePositive) {
	// 	} @else {
	// 		@error #{$space-unit-fallback} "is invalid value of `grid.space-unit-fallback`";
	// 	}

	// 	@if val($containers, list) {
	// 	} @else {
	// 		@error #{$containers} "is invalid value of `grid.containers`";
	// 	}

	// 	@if val($containers-fluid, list) {
	// 	} @else {
	// 		@error #{$containers-fluid} "is invalid value of `grid.containers-fluid`";
	// 	}
	// }

	// @warn "validated!";
	// @return true;
}

.test {
	content: grid-validation($grid);
	@if grid-validation($grid) {
		@warn "Hooooray!";
	} @else {
		@warn "Daaamn!";
	}
}
