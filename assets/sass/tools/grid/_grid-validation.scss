///
/// Function for validating every `$grid`'s key value
///
/// By deafult it references to `$breakpoints` map for getting
///
/// a required number of classes and values for validating keys
///
/// @group grid
///
/// @require {function} val data type validation function
/// @require {function} exists function for existance check up
/// @require {mixin} bp mixin for responsive breakpoints handling
/// @require {map} $breakpoints values for `bp` mixin
/// @require {function} sl-walk function for passing every item value from a list with parameters
///
/// @param {map} grid ($grid) Map for storing grid configurations
/// @param {Map key} grid.columns - number of columns
/// @param {Map key} grid.style - grid output style
/// @param {Map key} grid.sizing - sizing output
/// @param {Map key} grid.direction - direction output
/// @param {Map key} grid.bp - breakpoint output
/// @param {Map key} grid.pull-classes - pull classes output
/// @param {Map key} grid.push-classes - push classes output
/// @param {Map key} grid.offset-classes - offset classes output
/// @param {Map key} grid.container-classes - container classes output
/// @param {Map key} grid.container-fluid-classes - container-fluid classes output
/// @param {Map key} grid.bp-sizing-flow - breakpoint auto sizing output style
/// @param {Map key} grid.ms-base - base value for `modular-scale`
/// @param {Map key} grid.ms-ratio - ratio value for `modular-scale`
/// @param {Map key} grid.ms-round - `modular-scale` round function switcher
/// @param {Map key} grid.custom - grid custom values
/// @param {Map key} grid.static - grid static values
/// @param {Map key} grid.containers - grid container values
/// @param {Map key} grid.containers-fluid - grid container-fluid values
/// @param {Map key} grid.block-grid-name - grid block class name
/// @param {Map key} grid.block-bp-names - breakpoints block class names
/// @param {Map key} grid.element-gutter-names - element gutter class names
/// @param {Map key} grid.element-row-name - element row class name
/// @param {Map key} grid.element-container-name - element container name
/// @param {Map key} grid.element-container-fluid-name - element container-fluid name
/// @param {Map key} grid.modifier-direction-names - modifier direction class names
/// @param {Map key} grid.modifier-sizing-names - modifier sizing class names
/// @param {Map key} grid.modifier-reset-name - modifier reset class
///
/// @throw #{$columns} 'is invalid value of `grid.columns`'
/// @throw #{$style} 'is invalid value of `grid.style`'
/// @throw #{$sizing} 'is invalid value of `grid.sizing`'
/// @throw #{$bp} 'is invalid value of `grid.bp`'
/// @throw #{$direction} 'is invalid value of `grid.direction`'
/// @throw #{$pull-classes} 'is invalid value of `grid.pull-classes`'
/// @throw #{$push-classes} 'is invalid value of `grid.push-classes`'
/// @throw #{$offset-classes} 'is invalid value of `grid.offset-classes`'
/// @throw #{$container-classes} 'is invalid value of `grid.container-classes`'
/// @throw #{$container-fluid-classes} 'is invalid value of `grid.container-fluid-classes`'
/// @throw #{$ms-base} 'is invalid value of `grid.ms-base`'
/// @throw #{$ms-ratio} 'is invalid value of `grid.ms-ratio`'
/// @throw #{$ms-round} 'is invalid value of `grid.ms-round`'
/// @throw #{$bp-sizing-flow} 'is invalid value of `grid.bp-sizing-flow`'
/// @throw #{$custom} 'is invalid value of `grid.custom`'
/// @throw #{$static} 'is invalid value of `grid.static`'
/// @throw #{$containers} 'is invalid value of `grid.containers`'
/// @throw #{$containers-fluid} 'is invalid value of `grid.containers-fluid`'
/// @throw #{$block-grid-name} 'is invalid value of `grid.block-grid-name`'
/// @throw #{$block-bp-names} 'is invalid value of `grid.block-bp-names`'
/// @throw #{$element-gutter-names} 'is invalid value of `grid.element-gutter-names`'
/// @throw #{$element-row-name} 'is invalid value of `grid.element-row-name`'
/// @throw #{$element-container-name} 'is invalid value of `grid.element-container-name`'
/// @throw #{$element-container-fluid-name} 'is invalid value of `grid.element-container-fluid-name`'
/// @throw #{$modifier-direction-names} 'is invalid value of `grid.modifier-direction-names`'
/// @throw #{$modifier-sizing-names} 'is invalid value of `grid.modifier-sizing-names`'
/// @throw #{$modifier-reset-name} 'is invalid value of `grid.modifier-reset-name`'
///
/// @todo clean comments, '@debug' statements, call
///

@function grid-validation($map: $grid) {
	@debug $map;

	@if val($map, map) and
		exists(bp, mixin) and
		exists(breakpoints, var) {
		$columns: map-get($map, columns);
		$style: map-get($map, style);
		$sizing: map-get($map, sizing);
		$direction: map-get($map, direction);
		$bp: map-get($map, bp);
		$pull-classes: map-get($map, pull-classes);
		$push-classes: map-get($map, push-classes);
		$offset-classes: map-get($map, offset-classes);
		$container-classes: map-get($map, container-classes);
		$container-fluid-classes: map-get($map, container-fluid-classes);
		$bp-sizing-flow: map-get($map, bp-sizing-flow);
		$ms-base: map-get($map, ms-base);
		$ms-ratio: map-get($map, ms-ratio);
		$ms-round: map-get($map, ms-round);
		$custom: map-get($map, custom);
		$static: map-get($map, static);
		$containers: map-get($map, containers);
		$containers-fluid: map-get($map, containers-fluid);
		$block-grid-name: map-get($map, block-grid-name);
		$block-bp-names: map-get($map, block-bp-names);
		$element-gutter-names: map-get($map, element-gutter-names);
		$element-row-name: map-get($map, element-row-name);
		$element-container-name: map-get($map, element-container-name);
		$element-container-fluid-name: map-get($map, element-container-fluid-name);
		$modifier-direction-names: map-get($map, modifier-direction-names);
		$modifier-sizing-names: map-get($map, modifier-sizing-names);
		$modifier-reset-name: map-get($map, modifier-reset-name);

		@debug $block-bp-names + "\\\\\\\\\\\\\\\\\/";

		$list-size: length(map-keys($breakpoints));

	@if not val($columns, integer) and val($columns, positive) {

		@error #{$columns} 'is invalid value of `grid.columns`';

	} @else if (not val($style, string)) and not index('ms' 'custom' 'static', $style) {

		@error #{$style} 'is invalid value of `grid.style`';

	} @else if not val($sizing, bool) {

		@error #{$sizing} 'is invalid value of `grid.sizing`';

	} @else if not val($bp, bool) {

		@error #{$bp} 'is invalid value of `grid.bp`';

	} @else if not val($direction, bool) {

		@error #{$direction} 'is invalid value of `grid.direction`';

	} @else if not val($pull-classes, bool) {

		@error #{$pull-classes} 'is invalid value of `grid.pull-classes`';

	} @else if not val($push-classes, bool) {

		@error #{$push-classes} 'is invalid value of `grid.push-classes`';

	} @else if not val($offset-classes, bool) {

		@error #{$offset-classes} 'is invalid value of `grid.offset-classes`';

	} @else if not val($container-classes, bool) {

		@error #{$container-classes} 'is invalid value of `grid.container-classes`';

	} @else if not val($container-fluid-classes, bool) {

		@error #{$container-fluid-classes} 'is invalid value of `grid.container-fluid-classes`';

	} @else if not val($ms-base, measurePositive) {

		@error #{$ms-base} 'is invalid value of `grid.ms-base`';

	} @else if not (val($ms-ratio, number) and val($ms-ratio, positive) ) {

		@error #{$ms-ratio} 'is invalid value of `grid.ms-ratio`';

	} @else if not val($ms-round, bool) {

		@error #{$ms-round} 'is invalid value of `grid.ms-round`';

	} @else if not val($bp-sizing-flow, bool) {

		@error #{$bp-sizing-flow} 'is invalid value of `grid.bp-sizing-flow`';

	} @else if not (val($custom, list) and not index(sl-walk($custom, val, measurePositive), false) and length($custom) == $list-size) {

		@error #{$custom} 'is invalid value of `grid.custom`';

	} @else if not val($static, measurePositive) {

		@error #{$static} 'is invalid value of `grid.static`';

	} @else if not (val($containers, list) and not index(sl-walk($containers, val, measurePositive), false) and length($containers) == $list-size) {

		@error #{$containers} 'is invalid value of `grid.containers`';

	} @else if not (val($containers-fluid, list) and not index(sl-walk($containers-fluid, val, measurePositive), false) and length($containers-fluid) == $list-size) {

		@error #{$containers-fluid} 'is invalid value of `grid.containers-fluid`';

	} @else if not (val($block-bp-names, list) and not index(sl-walk($block-bp-names, val, string), false) and length($block-bp-names) == $list-size) {

		@error #{$block-bp-names} 'is invalid value of `grid.block-bp-names`';

	} @else if not (val($modifier-direction-names, list) and not index(sl-walk($modifier-direction-names, val, string), false) and length($modifier-direction-names) == 2) {

		@error #{$modifier-direction-names} 'is invalid value of `grid.modifier-direction-names`';

	} @else if not (val($modifier-sizing-names, list) and not index(sl-walk($modifier-sizing-names, val, string), false) and length($modifier-sizing-names) == $list-size) {

		@error #{$modifier-sizing-names} 'is invalid value of `grid.modifier-sizing-names`';

	} @else if not (val($modifier-reset-name, string)) {

		@error #{$modifier-reset-name} 'is invalid value of `grid.modifier-reset-name`';

	}  @else if not (val($element-gutter-names, list) and not index(sl-walk($element-gutter-names, val, string), false)) {

		@error #{$element-gutter-names} 'is invalid value of `grid.element-gutter-names`';

	}  @else if not val($element-row-name, string) {

		@error #{$element-row-name} 'is invalid value of `grid.element-row-name`';

	}  @else if not val($element-container-name, string) {

		@error #{$element-container-name} 'is invalid value of `grid.element-container-name`';

	}  @else if not val($element-container-fluid-name, string) {

		@error #{$element-container-fluid-name} 'is invalid value of `grid.element-container-fluid-name`';

	}  @else if not val($block-grid-name, string) {

		@error #{$block-grid-name} 'is invalid value of `grid.block-grid-name`';

	}  @else if val($columns, integer) and val($columns, positive) and
	    val($style, string) and index('ms' 'custom' 'static', $style) and
		val($ms-base, measurePositive) and
		val($ms-ratio, number) and val($ms-ratio, positive) and
		val($ms-round, bool) and
		val($bp-sizing-flow, bool) and
		val($sizing, bool) and
		val($bp, bool) and
		val($direction, bool) and
		val($pull-classes, bool) and
		val($push-classes, bool) and
		val($offset-classes, bool) and
		val($container-classes, bool) and
		val($container-fluid-classes, bool) and
		val($custom, list) and not index(sl-walk($custom, val, measurePositive), false) and length($custom) == $list-size and
		val($static, measurePositive) and
		val($containers, list) and not index(sl-walk($containers, val, measurePositive), false) and length($containers) == $list-size and
		val($containers-fluid, list) and not index(sl-walk($containers-fluid, val, measurePositive), false) and (length($containers-fluid) == $list-size) and
		val($block-grid-name, string) and
		val($block-bp-names, list) and not index(sl-walk($block-bp-names, val, string), false) and length($block-bp-names) == $list-size and
		val($element-gutter-names, list) and not index(sl-walk($element-gutter-names, val, string), false) and
		val($element-row-name, string) and
		val($element-container-name, string) and
		val($element-container-fluid-name, string) and
		val($modifier-direction-names, list) and not index(sl-walk($modifier-direction-names, val, string), false) and length($modifier-direction-names) == 2 and
		val($modifier-sizing-names, list) and not index(sl-walk($modifier-sizing-names, val, string), false) and (length($modifier-sizing-names) == $list-size) and
		val($modifier-reset-name, string) {

			@return true;

    	}

	} @else {

		@return false;

    }
}

.test {
	content: grid-validation($grid);
	@if grid-validation($grid) {
		@warn "Hooooray!";
	} @else {
		@warn "Daaamn!";
	}
}
