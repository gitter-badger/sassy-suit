///
/// Function for validating every `$grid`'s key value
///
/// By deafult it references to `$breakpoints` map for calculating
///
/// a required number of classes and values for validating
///
/// `space-units`, `containers`, `containers-fluid` keys
///
/// @group grid
///
/// @require {function} val data type validation function
/// @require {function} exists function for existance check up
/// @require {mixin} bp mixin for responsive breakpoints handling
/// @require {map} $breakpoints values for `bp` mixin
/// @require {function} sl-walk function for passing every item value from a list with parameters
///
/// @param {map} grid ($grid) Map for storing grid configurations
/// @param {map key} grid.columns
/// @param {map key} grid.pull-output
/// @param {map key} grid.push-output
/// @param {map key} grid.offset-output
/// @param {map key} grid.values
/// @param {map key} grid.ms-base
/// @param {map key} grid.ms-ratio
/// @param {map key} grid.ms-round
/// @param {map key} grid.bp-value-flow
/// @param {map key} grid.sizing-output
/// @param {map key} grid.bp-output
/// @param {map key} grid.direction-output
/// @param {map key} grid.pull-output
/// @param {map key} grid.push-output
/// @param {map key} grid.offset-output
/// @param {map key} grid.space-units
/// @param {map key} grid.space-unit-fallback
/// @param {map key} grid.containers
/// @param {map key} grid.containers-fluid
///
/// @throw #{$columns} 'is invalid value of `grid.columns`'
/// @throw #{$pull-output} 'is invalid value of `grid.pull-output`'
/// @throw #{$push-output} 'is invalid value of `grid.push-output`'
/// @throw #{$offset-output} 'is invalid value of `grid.offset-output`'
/// @throw #{$values} 'is invalid value of `grid.values`'
/// @throw #{$ms-base} 'is invalid value of `grid.ms-base`'
/// @throw #{$ms-ratio} 'is invalid value of `grid.ms-ratio`'
/// @throw #{$ms-round} 'is invalid value of `grid.ms-round`'
/// @throw #{$bp-value-flow} 'is invalid value of `grid.bp-value-flow`'
/// @throw #{$sizing-output} 'is invalid value of `grid.sizing-output`'
/// @throw #{$bp-output} 'is invalid value of `grid.bp-output`'
/// @throw #{$direction-output} 'is invalid value of `grid.direction-output`'
/// @throw #{$pull-output} 'is invalid value of `grid.pull-output`'
/// @throw #{$push-output} 'is invalid value of `grid.push-output`'
/// @throw #{$offset-output} 'is invalid value of `grid.offset-output`'
/// @throw #{$space-units} 'is invalid value of `grid.space-units`'
/// @throw #{$space-unit-fallback} 'is invalid value of `grid.space-unit-fallback`'
/// @throw #{$containers} 'is invalid value of `grid.containers`'
/// @throw #{$containers-fluid} 'is invalid value of `grid.containers-fluid`'
///
/// @todo clean comments, '@debug' statements, call
///

@function grid-validation($map: $grid) {
	@debug $map;

	@if val($map, map) and
		exists(bp, mixin) and
		exists(breakpoints, var) {
		$columns: map-get($map, columns);
		$pull-output: map-get($map, pull-output);
		$push-output: map-get($map, push-output);
		$offset-output: map-get($map, offset-output);
		$values: map-get($map, values);
		$ms-base: map-get($map, ms-base);
		$ms-ratio: map-get($map, ms-ratio);
		$ms-round: map-get($map, ms-round);
		$bp-value-flow: map-get($map, bp-value-flow);
		$sizing-output: map-get($map, sizing-output);
		$bp-output: map-get($map, bp-output);
		$direction-output: map-get($map, direction-output);
		$pull-output: map-get($map, pull-output);
		$push-output: map-get($map, push-output);
		$offset-output: map-get($map, offset-output);
		$space-units: map-get($map, space-units);
		$space-unit-fallback: map-get($map, space-unit-fallback);
		$containers: map-get($map, containers);
		$containers-fluid: map-get($map, containers-fluid);
		$bp-class-names: map-get($map, bp-class-names);
		$space-unit-class-names: map-get($map, space-unit-class-names);
		// $direction-class-names: map-get($map, direction-class-names);
		// $gutter-class-name: map-get($map, gutter-class-name);
		// $row-class-name: map-get($map, row-class-name);
		// $container-class-name: map-get($map, container-class-name);
		// $container-fluid-class-name: map-get($map, container-fluid-class-name);

		@debug $space-unit-class-names + "\\\\\\\\\\\\\\\\\/";

		$list-size: length(map-keys($breakpoints));

	@if not val($columns, integer) and val($columns, positive) {

		@error #{$columns} 'is invalid value of `grid.columns`';

	} @else if (not val($values, string)) and not index('ms' 'space-units' 'space-unit-fallback', $values) {

		@error #{$pull-output} 'is invalid value of `grid.pull-output`';

	} @else if not val($pull-output, bool) {

		@error #{$pull-output} 'is invalid value of `grid.pull-output`';

	} @else if not val($push-output, bool) {

		@error #{$push-output} 'is invalid value of `grid.push-output`';

	} @else if not val($offset-output, bool) {

		@error #{$offset-output} 'is invalid value of `grid.offset-output`';

	} @else if not val($values, string) and (not index('ms' 'space-units' 'space-units-fallback', $values)) {

		@error #{$values} 'is invalid value of `grid.values`';

	} @else if not val($ms-base, measurePositive) {

		@error #{$ms-base} 'is invalid value of `grid.ms-base`';

	} @else if not (val($ms-ratio, number) and val($ms-ratio, positive) ) {

		@error #{$ms-ratio} 'is invalid value of `grid.ms-ratio`';

	} @else if not val($ms-round, bool) {

		@error #{$ms-round} 'is invalid value of `grid.ms-round`';

	} @else if not val($bp-value-flow, bool) {

		@error #{$bp-value-flow} 'is invalid value of `grid.bp-value-flow`';

	} @else if not val($sizing-output, bool) {

		@error #{$sizing-output} 'is invalid value of `grid.sizing-output`';

	} @else if not val($bp-output, bool) {

		@error #{$bp-output} 'is invalid value of `grid.bp-output`';

	} @else if not val($direction-output, bool) {

		@error #{$direction-output} 'is invalid value of `grid.direction-output`';

	} @else if not val($pull-output, bool) {

		@error #{$pull-output} 'is invalid value of `grid.pull-output`';

	} @else if not val($push-output, bool) {

		@error #{$push-output} 'is invalid value of `grid.push-output`';

	} @else if not val($offset-output, bool) {

		@error #{$offset-output} 'is invalid value of `grid.offset-output`';

	} @else if not (val($space-units, list) and not index(sl-walk($space-units, val, measurePositive), false) and length($space-units) == $list-size) {

		@error #{$space-units} 'is invalid value of `grid.space-units`';

	} @else if not val($space-unit-fallback, measurePositive) {

		@error #{$space-unit-fallback} 'is invalid value of `grid.space-unit-fallback`';

	} @else if not (val($containers, list) and not index(sl-walk($containers, val, measurePositive), false) and length($containers) == $list-size) {

		@error #{$containers} 'is invalid value of `grid.containers`';

	} @else if not (val($containers-fluid, list) and not index(sl-walk($containers-fluid, val, measurePositive), false) and length($containers-fluid) == $list-size) {

		@error #{$containers-fluid} 'is invalid value of `grid.containers-fluid`';

	} @else if not (val($bp-class-names, list) and not index(sl-walk($bp-class-names, val, string), false) and length($bp-class-names) == $list-size) {

		@error #{$bp-class-names} 'is invalid value of `grid.bp-class-names`';

	} @else if not (val($space-unit-class-names, list) and not index(sl-walk($space-unit-class-names, val, string), false) and length($space-unit-class-names) == $list-size) {

		@error #{$space-unit-class-names} 'is invalid value of `grid.space-unit-class-names`';

	}  @else if val($columns, integer) and val($columns, positive) and
		val($pull-output, bool) and
		val($push-output, bool) and
		val($offset-output, bool) and
	    val($values, string) and index('ms' 'space-units' 'space-unit-fallback', $values) and
		val($ms-base, measurePositive) and
		val($ms-ratio, number) and val($ms-ratio, positive) and
		val($ms-round, bool) and
		val($bp-value-flow, bool) and
		val($sizing-output, bool) and
		val($bp-output, bool) and
		val($direction-output, bool) and
		val($pull-output, bool) and
		val($push-output, bool) and
		val($offset-output, bool) and
		val($space-units, list) and not index(sl-walk($space-units, val, measurePositive), false) and length($space-units) == $list-size and
		val($space-unit-fallback, measurePositive) and
		val($containers, list) and not index(sl-walk($containers, val, measurePositive), false) and length($containers) == $list-size and
		val($containers-fluid, list) and not index(sl-walk($containers-fluid, val, measurePositive), false) and (length($containers-fluid) == $list-size) and
		val($bp-class-names, list) and not index(sl-walk($bp-class-names, val, string), false) and length($bp-class-names) == $list-size and
		val($space-unit-class-names, list) and not index(sl-walk($space-unit-class-names, val, string), false) and length($space-unit-class-names) == $list-size{

			@return true;

    	}

	} @else {

		@return false;

    }
}

.test {
	content: grid-validation($grid);
	@if grid-validation($grid) {
		@warn "Hooooray!";
	} @else {
		@warn "Daaamn!";
	}
}
