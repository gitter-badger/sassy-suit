/*==========  Base Sets Placeholders  ==========*/

%typeSetXs {
	font-size: nth($fontSize, 1);
	line-height: nth($lineHeight, 1);
	letter-spacing: nth($letterSpacing, 1);
	padding: nth($fontPadding, 1);

	@if $typeOutputStyle == responsive {
		@include typeSetResponsive(1);
	}
}

%typeSetSm {
	font-size: nth($fontSize, 2);
	line-height: nth($lineHeight, 2);
	letter-spacing: nth($letterSpacing, 2);
	padding: nth($fontPadding, 2);

	@if $typeOutputStyle == responsive {
		@include typeSetResponsive(2);
	}
}

%typeSetMd {
	font-size: nth($fontSize, 3);
	line-height: nth($lineHeight, 3);
	letter-spacing: nth($letterSpacing, 3);
	padding: nth($fontPadding, 3);

	@if $typeOutputStyle == responsive {
		@include typeSetResponsive(3);
	}
}

%typeSetLg {
	font-size: nth($fontSize, 4);
	line-height: nth($lineHeight, 4);
	letter-spacing: nth($letterSpacing, 4);
	padding: nth($fontPadding, 4);

	@if $typeOutputStyle == responsive {
		@include typeSetResponsive(4);
	}
}

%typeSetXl {
	font-size: nth($fontSize, 5);
	line-height: nth($lineHeight, 5);
	letter-spacing: nth($letterSpacing, 5);
	padding: nth($fontPadding, 5);

	@if $typeOutputStyle == responsive {
		@include typeSetResponsive(5);
	}
}

%typeSetXxl {
	font-size: nth($fontSize, 6);
	line-height: nth($lineHeight, 6);
	letter-spacing: nth($letterSpacing, 6);
	padding: nth($fontPadding, 6);

	@if $typeOutputStyle == responsive {
		@include typeSetResponsive(6);
	}
}

%typeSetXxxl {
	font-size: nth($fontSize, 7);
	line-height: nth($lineHeight, 7);
	letter-spacing: nth($letterSpacing, 7);
	padding: nth($fontPadding, 7);

	@if $typeOutputStyle == responsive {
		@include typeSetResponsive(7);
	}
}

%typeSetLarger {
	font-size: nth($fontSize, 8);
	line-height: nth($lineHeight, 8);
	letter-spacing: nth($letterSpacing, 8);
	padding: nth($fontPadding, 8);

	@if $typeOutputStyle == responsive {
		@include typeSetResponsive(8);
	}
}

%typeSetLargest {
	font-size: nth($fontSize, 9);
	line-height: nth($lineHeight, 9);
	letter-spacing: nth($letterSpacing, 9);
	padding: nth($fontPadding, 9);

	@if $typeOutputStyle == responsive {
		@include typeSetResponsive(9);
	}
}


/*==========  Style Sets Placeholders  ==========*/

%typeStyleHeader {
	font-family: unquote($fontFamilyHeaderName);
}

%typeStyleHeaderAlt {
	font-family: unquote($fontFamilyHeaderAltName);
}

%typeStyleHeader,
%typeStyleHeaderAlt {
	color: #333;
}

%typeStyleText {
	font-family: unquote($fontFamilyTextName);
}

%typeStyleTextAlt {
	font-family: unquote($fontFamilyTextAltName);
}

%typeStyleText,
%typeStyleTextAlt {
	color: #111;
}

%typeStyleItalic {
	font-style: italic;
}

%typeStyleBold {
	font-weight: bold;
}

%typeStyleLight {
	font-weight: lighter;
}

%typeStyleLetterSpacingReset {
	letter-spacing: 0;
}

%typeStyleTextShadow {
	text-shadow: 1px 1px 0 #000;
}

%typeStyleTextShadowAlt {
	text-shadow: 1px 1px 0 #fff;
}
