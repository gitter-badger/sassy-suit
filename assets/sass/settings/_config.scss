/**
*
* Global sassy-suit breakpoints configurations
*
* @group configs
*
*/

$breakpoints: (
	'xs':   					250px,
	'sm':   					300px,
	'md':   					450px,
	'lg':   					650px,
	'xl':   					900px,
	'xxl': 						1200px
);


/**
*
* Global sassy-suit configurations for all tools
*
* @group configs
*
* @prop {Map} margins.xs (xs) - the smallest margin
*
* @todo finish documenting all existing keys
*
*/

$margins: (
	Xs:   					5px,
	Sm:   					10px,
	Md:   					15px,
	Lg:   					20px,
	Xl:   					25px,
	Xxl: 					30px
);

$marginDirections: (
	base: 					"",
	top: 					"Top",
	right: 					"Right",
	bottom: 				"Bottom",
	left: 					"Left"
);

$paddings: (
	Xs:   					5px,
	Sm:   					10px,
	Md:   					15px,
	Lg:   					20px,
	Xl:   					25px,
	Xxl: 					30px
);

$paddingDirections: (
	base: 					"",
	top: 					"Top",
	right: 					"Right",
	bottom: 				"Bottom",
	left: 					"Left"
);


$type: (
	indexBegin: 			-2,
	indexEnd: 				6,
	base: 					16px,
	sizeRatio: 				1.5,
	lineHeightRatio: 		1.5,
	paddingRatio: 			1.5,
	letterSpacingRatio: 	-.025,
	outputStyle: 			responsive,
	bps: 					320px 480px 768px 960px 1140px,
	bpsRatios: 				1.1 1.1 1.1 1.1 1.1,
	liquidRatio: 			1.5,
	liquidBps: 				(300px 400px),
	round: 					(fontSize, lineHeight, padding),
	webFonts: (
		header: 				"Roboto",
		headerBold: 			"Roboto: 700",
		headerLight: 		  	"Roboto: 300",
		headerItalic: 			"Roboto: 400, italic",
		headerAlt:  			"Nunito",
		text: 					"Open Sans",
		textBold: 				"Open Sans: 700",
		textLight: 				"Open Sans: 300",
		textItalic: 			"Open Sans: 400, italic",
		textAlt: 				"Dosis"
	),
	fontFamilies: (
		header: 				"Roboto, serif",
		headerAlt: 				"Nunito, serif",
		text: 					"Open Sans, sans-serif",
		textAlt:  				"Dosis, sans-serif"
	)
);


/**
*
* Global sassy-suit grid configurations
*
* By deafult it uses values `bp` mixin
*
* with `$breakpoints`'s values for each breakpoint.
*
* @group configs
*
* @prop {Map key} grid.columns (integer) - number of columns
* @prop {Map key} grid.style ('ms' | 'custom' | 'static') - switcher for using modular-scale, custom or static values for grid calculations
* @prop {Map key} grid.sizing (bool) - `sizing` class name output switcher
* @prop {Map key} grid.direction (bool) - `direction` class name output switcher
* @prop {Map key} grid.bp (bool) - `breakpoint` class name output switcher
* @prop {Map key} grid.pull-classes (bool) - `pull` class name output switcher
* @prop {Map key} grid.push-classes (bool) - `push` class name output switcher
* @prop {Map key} grid.offset-classes (bool) - `offset` class name output switcher
* @prop {Map key} grid.container-classes (bool) - `container` class name output switcher
* @prop {Map key} grid.container-fluid-classes (bool) - `container-fluid` class name output switcher
* @prop {Map key} grid.bp-sizing-flow (bool) - `bp-sizing-flow` is a switcher for grid calculation option
* @prop {Map key} grid.ms-base (measure) - base value argument for `ms-list` function
* @prop {Map key} grid.ms-ratio (integer) - ratio argument for `ms-list` function
* @prop {Map key} grid.ms-round (bool) - switcher for rounding each value of `ms-list` function output
* @prop {Map key} grid.custom (list of positive measures) - units for manual setting of `row` and `gutter` values, this key gets validated and used when `ms: false`
* @prop {Map key} grid.static (positive measure) - fallback value for space-units, this key gets validated and used when `'bp-value-flow': false`, `'sizing-output': false`, `'bp-output': false`
* @prop {Map key} grid.containers (list of positive measures) - container width values
* @prop {Map key} grid.containers-fluid (list of positive measures) - container max-width values
* @prop {Map key} grid.block-grid-name (string) - block `grid` class name
* @prop {Map key} grid.block-bp-names (list of strings) - block `breakpoint` class names
* @prop {Map key} grid.element-gutter-names (list of strings) - element `gutter` class names
* @prop {Map key} grid.element-row-name (string) - element `row` class name
* @prop {Map key} grid.element-container-name (string) - element `container` class name
* @prop {Map key} grid.element-container-fluid-name (string) - element `container-fluid` class name
* @prop {Map key} grid.modifier-sizing-names (list of strings) - modifier `sizing` class names
* @prop {Map key} grid.modifier-direction-names (list of strings) - modifier `direction` class names
* @prop {Map key} grid.modifier-reset-names (string) - modifier `reset` class names
*
* @todo rethink API naming conventions, [vocabulary](http://www.thesaurus.com/)
*
*/

$grid: (
	'columns': 12,
	'style': 'ms',
	'sizing': true,
	'direction': true,
	'bp': true,
	'pull-classes': true,
	'push-classes': true,
	'offset-classes': true,
	'container-classes': true,
	'container-fluid-classes': true,
	'bp-sizing-flow': true,
	'ms-base': 5px,
	'ms-ratio': 1.5,
	'ms-round': true,
	'custom': 5px 10px 15px 20px 25px 30px,
	'static': 15px,
	'containers': 300px 450px 600px 700px 900px 1100px,
	'containers-fluid': 400px 550px 700px 800px 1000px 1200px,
	'block-grid-name': 'g',
	'block-bp-names': 'xs' 'sm' 'md' 'lg' 'xl' 'xxl',
	'element-gutter-names': 'gutters' 'gutter',
	'element-row-name': 'row',
	'element-container-name': 'container',
	'element-container-fluid-name': 'container-fluid',
	'modifier-sizing-names': 'xs' 'sm' 'md' 'lg' 'xl' 'xxl',
	'modifier-direction-names': 'before' 'after',
	'modifier-reset-name': 'reset',
);

