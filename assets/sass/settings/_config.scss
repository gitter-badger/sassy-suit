/**
*
* Global sassy-suit breakpoints configurations
*
* @group configs
*
*/

$breakpoints: (
	'xs':   					250px,
	'sm':   					300px,
	'md':   					450px,
	'lg':   					650px,
	'xl':   					900px,
	'xxl': 						1200px
);


/**
*
* Global sassy-suit configurations for all tools
*
* @group configs
*
* @prop {Map} margins.xs (xs) - the smallest margin
*
* @todo finish documenting all existing keys
*
*/

$margins: (
	Xs:   					5px,
	Sm:   					10px,
	Md:   					15px,
	Lg:   					20px,
	Xl:   					25px,
	Xxl: 					30px
);

$marginDirections: (
	base: 					"",
	top: 					"Top",
	right: 					"Right",
	bottom: 				"Bottom",
	left: 					"Left"
);

$paddings: (
	Xs:   					5px,
	Sm:   					10px,
	Md:   					15px,
	Lg:   					20px,
	Xl:   					25px,
	Xxl: 					30px
);

$paddingDirections: (
	base: 					"",
	top: 					"Top",
	right: 					"Right",
	bottom: 				"Bottom",
	left: 					"Left"
);


$type: (
	indexBegin: 			-2,
	indexEnd: 				6,
	base: 					16px,
	sizeRatio: 				1.5,
	lineHeightRatio: 		1.5,
	paddingRatio: 			1.5,
	letterSpacingRatio: 	-.025,
	outputStyle: 			responsive,
	bps: 					320px 480px 768px 960px 1140px,
	bpsRatios: 				1.1 1.1 1.1 1.1 1.1,
	liquidRatio: 			1.5,
	liquidBps: 				(300px 400px),
	round: 					(fontSize, lineHeight, padding),
	webFonts: (
		header: 				"Roboto",
		headerBold: 			"Roboto: 700",
		headerLight: 		  	"Roboto: 300",
		headerItalic: 			"Roboto: 400, italic",
		headerAlt:  			"Nunito",
		text: 					"Open Sans",
		textBold: 				"Open Sans: 700",
		textLight: 				"Open Sans: 300",
		textItalic: 			"Open Sans: 400, italic",
		textAlt: 				"Dosis"
	),
	fontFamilies: (
		header: 				"Roboto, serif",
		headerAlt: 				"Nunito, serif",
		text: 					"Open Sans, sans-serif",
		textAlt:  				"Dosis, sans-serif"
	)
);


/**
*
* Global sassy-suit grid configurations
*
* By deafult it uses values `bp` mixin
*
* with `$breakpoints`'s values for each breakpoint.
*
* @group configs
*
* @prop {Map key} grid.columns (integer) - number of columns
* @prop {Map key} grid.bp-value-flow (bool) - switcher for automatic pairing of breakpoint and matching value for `gutter`, `row` and `container` classes
* @prop {Map key} grid.sizing-output (bool) - switcher for outputing manual grid `gutter` and `row` classes
* @prop {Map key} grid.direction-output (bool) - switcher for outputing directional grid `gutter` and `row` classes
* @prop {Map key} grid.bp-output (bool) - switcher for outputing manual grid `gutter` and `row` classes for all breakpoints
* @prop {Map key} grid.pull-output (bool) - switcher for outputing grid `pull` classes
* @prop {Map key} grid.push-output (bool) - switcher for outputing grid `push` classes
* @prop {Map key} grid.offset-output (bool) - switcher for outputing grid `offset` classes
* @prop {Map key} grid.values ('ms' | 'space-units' | 'space-units-fallback') - switcher for using modular-scale, space-units or space-units-fallback
* @prop {Map key} grid.ms-base (measure) - base value argument for `ms-list` function
* @prop {Map key} grid.ms-ratio (integer) - ratio argument for `ms-list` function
* @prop {Map key} grid.ms-round (bool) - switcher for rounding each value of `ms-list` function output
* @prop {Map key} grid.space-units (list of positive measures) - units for manual setting of `row` and `gutter` values, this key gets validated and used when `ms: false`
* @prop {Map key} grid.space-unit-fallback (positive measure) - fallback value for space-units, this key gets validated and used when `'bp-value-flow': false`, `'sizing-output': false`, `'bp-output': false`
* @prop {Map key} grid.containers (list of positive measures) - container width values
* @prop {Map key} grid.containers-fluid (list of positive measures) - container max-width values
* @prop {Map key} grid.bp-class-names (list of strings) - breakpoints class names
* @prop {Map key} grid.space-unit-class-names (list of strings) - space-units are used for generating `gutter` and `row` classes
* @prop {Map key} grid.direction-class-names (list of strings) - direction class names
* @prop {Map key} grid.gutter-class-name (list of strings) - gutter class names
* @prop {Map key} grid.row-class-name (string) - row class names
* @prop {Map key} grid.container-class-name (string) - container class names
* @prop {Map key} grid.container-fluid-class-name (string) - container fluid class names
* @prop {Map key} grid.container-fluid-class-name (string) - grid block class names
*
* @todo rethink API naming conventions, [vocabulary](http://www.thesaurus.com/)
*
*/

$grid: (
	'columns': 12,
	'values': 'space-units',
	'ms-base': 5px,
	'ms-ratio': 1.5,
	'ms-round': true,
	'space-units': 5px 10px 15px 20px 25px 30px,
	'space-unit-fallback': 15px,
	'sizing-output': true,
	'direction-output': true,
	'bp-output': false,
	'bp-value-flow': true,
	'pull-output': true,
	'push-output': true,
	'offset-output': true,
	'containers': 300px 450px 600px 700px 900px 1100px,
	'containers-fluid': 400px 550px 700px 800px 1000px 1200px,
	'bp-class-names': 'xs' 'sm' 'md' 'lg' 'xl' 'xxl',
	'space-unit-class-names': 'xs' 'sm' 'md' 'lg' 'xl' 'xxl',
	'direction-class-names': 'before' 'after',
	'gutter-class-name': 'gutters',
	'row-class-name': 'row',
	'container-class-name': 'container',
	'container-fluid-class-name': 'container-fluid',
	'block-class-name': 'g',
);
